module Sound.Tidal.Params where

-- Please note, this file is generated by bin/generate-params.hs
-- Submit any pull requests against that file and/or params-header.hs
-- in the same folder, thanks.

{-
    Params.hs - Provides the basic control patterns available to TidalCycles by default
    Copyright (C) 2021, Alex McLean and contributors

    This library is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this library.  If not, see <http://www.gnu.org/licenses/>.
-}

import qualified Data.Map.Strict as Map

import Sound.Tidal.Types
import Sound.Tidal.Value
import Sound.Tidal.Pattern
import Sound.Tidal.Signal.Base
import Sound.Tidal.Signal.Compose ((#))
-- import Sound.Tidal.Core ((#))
import Sound.Tidal.Utils
import Data.Maybe (fromMaybe)
import Data.Word (Word8)
import Data.Fixed (mod')

-- | group multiple params into one
grp :: [String -> ValueMap] -> Signal String -> ControlSignal
grp [] _ = silence
grp fs p = splitby <$> p
  where splitby name = Map.unions $ map (\(v, f) -> f v) $ zip (split name) fs
        split :: String -> [String]
        split = wordsBy (==':')

mF :: String -> String -> ValueMap
mF name v = fromMaybe Map.empty $ do f <- readMaybe v
                                     return $ Map.singleton name (VF f)

mI :: String -> String -> ValueMap
mI name v = fromMaybe Map.empty $ do i <- readMaybe v
                                     return $ Map.singleton name (VI i)

mS :: String -> String -> ValueMap
mS name v = Map.singleton name (VS v)

-- | Param makers

pF :: String -> Signal Double -> ControlSignal
pF name = fmap (Map.singleton name . VF)

pI :: String -> Signal Int -> ControlSignal
pI name = fmap (Map.singleton name . VI)

pB :: String -> Signal Bool -> ControlSignal
pB name = fmap (Map.singleton name . VB)
 
pR :: String -> Signal Rational -> ControlSignal
pR name = fmap (Map.singleton name . VR)

pN :: String -> Signal Note -> ControlSignal
pN name = fmap (Map.singleton name . VN)

pS :: String -> Signal String -> ControlSignal
pS name = fmap (Map.singleton name . VS)

pX :: String -> Signal [Word8] -> ControlSignal
pX name = fmap (Map.singleton name . VX)

pStateF ::
  String ->  -- ^ A parameter, e.g. `note`; a
  -- `String` recognizable by a `ValueMap`.
  String -> -- ^ Identifies the cycling state pattern.
  -- Can be anything the user wants.
  (Maybe Double -> Double) ->
  ControlSignal
pStateF name sName update = pure $ Map.singleton name $ VState statef
  where statef :: ValueMap -> (ValueMap, Value)
        statef sMap = (Map.insert sName v sMap, v) 
          where v = VF $ update $ (Map.lookup sName sMap) >>= getF

-- | `pStateList` is made with cyclic lists in mind,
-- but it can even "cycle" through infinite lists.
pStateList ::
  String ->  -- ^ A parameter, e.g. `note`; a
  -- `String` recognizable by a `ValueMap`.
  String ->  -- ^ Identifies the cycling state pattern.
  -- Can be anything the user wants.
  [Value] ->  -- ^ The list to cycle through.
  ControlSignal
pStateList name sName xs = pure $ Map.singleton name $ VState statef
  where statef :: ValueMap -> (ValueMap, Value)
        statef sMap = (Map.insert sName (VList $ tail looped) sMap, head looped) 
          where xs' = fromMaybe xs ((Map.lookup sName sMap) >>= getList)
                -- do this instead of a cycle, so it can get updated with the a list
                looped | null xs' = xs
                       | otherwise = xs'

-- | A wrapper for `pStateList` that accepts a `[Double]`
-- rather than a `[Value]`.
pStateListF :: String -> String -> [Double] -> ControlSignal
pStateListF name sName = pStateList name sName . map VF

-- | A wrapper for `pStateList` that accepts a `[String]`
-- rather than a `[Value]`.
pStateListS :: String -> String -> [String] -> ControlSignal
pStateListS name sName = pStateList name sName . map VS

-- | Grouped params

sound :: Signal String -> ControlSignal
sound = grp [mS "s", mF "n"]

sTake :: String -> [String] -> ControlSignal
sTake name xs = pStateListS "s" name xs

cc :: Signal String -> ControlSignal
cc = grp [mF "ccn", mF "ccv"]

nrpn :: Signal String -> ControlSignal
nrpn = grp [mI "nrpn", mI "val"]

nrpnn :: Signal Int -> ControlSignal
nrpnn = pI "nrpn"

nrpnv :: Signal Int -> ControlSignal
nrpnv = pI "val"

grain' :: Signal String -> ControlSignal
grain' = grp [mF "begin", mF "end"]

midinote :: Signal Note -> ControlSignal
midinote = note . (subtract 60 <$>)

drum :: Signal String -> ControlSignal
drum = n . (subtract 60 . drumN <$>)

drumN :: Num a => String -> a
drumN "hq" = 27
drumN "sl" = 28
drumN "ps" = 29
drumN "pl" = 30
drumN "st" = 31
drumN "sq" = 32
drumN "ml" = 33
drumN "mb" = 34
drumN "ab" = 35
drumN "bd" = 36
drumN "rm" = 37
drumN "sn" = 38
drumN "cp" = 39
drumN "es" = 40
drumN "lf" = 41
drumN "ch" = 42
drumN "lt" = 43
drumN "hh" = 44
drumN "ft" = 45
drumN "oh" = 46
drumN "mt" = 47
drumN "hm" = 48
drumN "cr" = 49
drumN "ht" = 50
drumN "ri" = 51
drumN "cy" = 52
drumN "be" = 53
drumN "ta" = 54
drumN "sc" = 55
drumN "cb" = 56
drumN "cs" = 57
drumN "vi" = 58
drumN "rc" = 59
drumN "hb" = 60
drumN "lb" = 61
drumN "mh" = 62
drumN "hc" = 63
drumN "lc" = 64
drumN "he" = 65
drumN "le" = 66
drumN "ag" = 67
drumN "la" = 68
drumN "ca" = 69
drumN "ma" = 70
drumN "sw" = 71
drumN "lw" = 72
drumN "sg" = 73
drumN "lg" = 74
drumN "cl" = 75
drumN "hi" = 76
drumN "li" = 77
drumN "mc" = 78
drumN "oc" = 79
drumN "tr" = 80
drumN "ot" = 81
drumN "sh" = 82
drumN "jb" = 83
drumN "bt" = 84
drumN "ct" = 85
drumN "ms" = 86
drumN "os" = 87
drumN _ = 0

-- Generated params

-- | a pattern of numbers that speed up (or slow down) samples while they play.
accelerate :: Signal Double -> ControlSignal
accelerate = pF "accelerate"
accelerateTake :: String -> [Double] -> ControlSignal
accelerateTake name xs = pStateListF "accelerate" name xs
accelerateCount :: String -> ControlSignal
accelerateCount name = pStateF "accelerate" name (maybe 0 (+1))
accelerateCountTo :: String -> Signal Double -> Signal ValueMap
accelerateCountTo name ipat = innerJoin $ (\i -> pStateF "accelerate" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

acceleratebus :: Signal Int -> Signal Double -> ControlSignal
acceleratebus _ _ = error $ "Control parameter 'accelerate' can't be sent to a bus."

-- | like @gain@, but linear.
amp :: Signal Double -> ControlSignal
amp = pF "amp"
ampTake :: String -> [Double] -> ControlSignal
ampTake name xs = pStateListF "amp" name xs
ampCount :: String -> ControlSignal
ampCount name = pStateF "amp" name (maybe 0 (+1))
ampCountTo :: String -> Signal Double -> Signal ValueMap
ampCountTo name ipat = innerJoin $ (\i -> pStateF "amp" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

ampbus :: Signal Int -> Signal Double -> ControlSignal
ampbus busid pat = (pF "amp" pat) # (pI "^amp" busid)
amprecv :: Signal Int -> ControlSignal
amprecv busid = pI "^amp" busid

-- | 
array :: Signal [Word8] -> ControlSignal
array = pX "array"
arrayTake :: String -> [Double] -> ControlSignal
arrayTake name xs = pStateListF "array" name xs
arraybus :: Signal Int -> Signal [Word8] -> ControlSignal
arraybus _ _ = error $ "Control parameter 'array' can't be sent to a bus."

-- | a pattern of numbers to specify the attack time (in seconds) of an envelope applied to each sample.
attack :: Signal Double -> ControlSignal
attack = pF "attack"
attackTake :: String -> [Double] -> ControlSignal
attackTake name xs = pStateListF "attack" name xs
attackCount :: String -> ControlSignal
attackCount name = pStateF "attack" name (maybe 0 (+1))
attackCountTo :: String -> Signal Double -> Signal ValueMap
attackCountTo name ipat = innerJoin $ (\i -> pStateF "attack" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

attackbus :: Signal Int -> Signal Double -> ControlSignal
attackbus busid pat = (pF "attack" pat) # (pI "^attack" busid)
attackrecv :: Signal Int -> ControlSignal
attackrecv busid = pI "^attack" busid

-- | a pattern of numbers from 0 to 1. Sets the center frequency of the band-pass filter.
bandf :: Signal Double -> ControlSignal
bandf = pF "bandf"
bandfTake :: String -> [Double] -> ControlSignal
bandfTake name xs = pStateListF "bandf" name xs
bandfCount :: String -> ControlSignal
bandfCount name = pStateF "bandf" name (maybe 0 (+1))
bandfCountTo :: String -> Signal Double -> Signal ValueMap
bandfCountTo name ipat = innerJoin $ (\i -> pStateF "bandf" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

bandfbus :: Signal Int -> Signal Double -> ControlSignal
bandfbus busid pat = (pF "bandf" pat) # (pI "^bandf" busid)
bandfrecv :: Signal Int -> ControlSignal
bandfrecv busid = pI "^bandf" busid

-- | a pattern of anumbers from 0 to 1. Sets the q-factor of the band-pass filter.
bandq :: Signal Double -> ControlSignal
bandq = pF "bandq"
bandqTake :: String -> [Double] -> ControlSignal
bandqTake name xs = pStateListF "bandq" name xs
bandqCount :: String -> ControlSignal
bandqCount name = pStateF "bandq" name (maybe 0 (+1))
bandqCountTo :: String -> Signal Double -> Signal ValueMap
bandqCountTo name ipat = innerJoin $ (\i -> pStateF "bandq" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

bandqbus :: Signal Int -> Signal Double -> ControlSignal
bandqbus busid pat = (pF "bandq" pat) # (pI "^bandq" busid)
bandqrecv :: Signal Int -> ControlSignal
bandqrecv busid = pI "^bandq" busid

-- | a pattern of numbers from 0 to 1. Skips the beginning of each sample, e.g. `0.25` to cut off the first quarter from each sample.
begin :: Signal Double -> ControlSignal
begin = pF "begin"
beginTake :: String -> [Double] -> ControlSignal
beginTake name xs = pStateListF "begin" name xs
beginCount :: String -> ControlSignal
beginCount name = pStateF "begin" name (maybe 0 (+1))
beginCountTo :: String -> Signal Double -> Signal ValueMap
beginCountTo name ipat = innerJoin $ (\i -> pStateF "begin" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

beginbus :: Signal Int -> Signal Double -> ControlSignal
beginbus _ _ = error $ "Control parameter 'begin' can't be sent to a bus."

-- | Spectral binshift
binshift :: Signal Double -> ControlSignal
binshift = pF "binshift"
binshiftTake :: String -> [Double] -> ControlSignal
binshiftTake name xs = pStateListF "binshift" name xs
binshiftCount :: String -> ControlSignal
binshiftCount name = pStateF "binshift" name (maybe 0 (+1))
binshiftCountTo :: String -> Signal Double -> Signal ValueMap
binshiftCountTo name ipat = innerJoin $ (\i -> pStateF "binshift" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

binshiftbus :: Signal Int -> Signal Double -> ControlSignal
binshiftbus busid pat = (pF "binshift" pat) # (pI "^binshift" busid)
binshiftrecv :: Signal Int -> ControlSignal
binshiftrecv busid = pI "^binshift" busid

-- | 
button0 :: Signal Double -> ControlSignal
button0 = pF "button0"
button0Take :: String -> [Double] -> ControlSignal
button0Take name xs = pStateListF "button0" name xs
button0Count :: String -> ControlSignal
button0Count name = pStateF "button0" name (maybe 0 (+1))
button0CountTo :: String -> Signal Double -> Signal ValueMap
button0CountTo name ipat = innerJoin $ (\i -> pStateF "button0" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

button0bus :: Signal Int -> Signal Double -> ControlSignal
button0bus busid pat = (pF "button0" pat) # (pI "^button0" busid)
button0recv :: Signal Int -> ControlSignal
button0recv busid = pI "^button0" busid

-- | 
button1 :: Signal Double -> ControlSignal
button1 = pF "button1"
button1Take :: String -> [Double] -> ControlSignal
button1Take name xs = pStateListF "button1" name xs
button1Count :: String -> ControlSignal
button1Count name = pStateF "button1" name (maybe 0 (+1))
button1CountTo :: String -> Signal Double -> Signal ValueMap
button1CountTo name ipat = innerJoin $ (\i -> pStateF "button1" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

button1bus :: Signal Int -> Signal Double -> ControlSignal
button1bus busid pat = (pF "button1" pat) # (pI "^button1" busid)
button1recv :: Signal Int -> ControlSignal
button1recv busid = pI "^button1" busid

-- | 
button10 :: Signal Double -> ControlSignal
button10 = pF "button10"
button10Take :: String -> [Double] -> ControlSignal
button10Take name xs = pStateListF "button10" name xs
button10Count :: String -> ControlSignal
button10Count name = pStateF "button10" name (maybe 0 (+1))
button10CountTo :: String -> Signal Double -> Signal ValueMap
button10CountTo name ipat = innerJoin $ (\i -> pStateF "button10" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

button10bus :: Signal Int -> Signal Double -> ControlSignal
button10bus busid pat = (pF "button10" pat) # (pI "^button10" busid)
button10recv :: Signal Int -> ControlSignal
button10recv busid = pI "^button10" busid

-- | 
button11 :: Signal Double -> ControlSignal
button11 = pF "button11"
button11Take :: String -> [Double] -> ControlSignal
button11Take name xs = pStateListF "button11" name xs
button11Count :: String -> ControlSignal
button11Count name = pStateF "button11" name (maybe 0 (+1))
button11CountTo :: String -> Signal Double -> Signal ValueMap
button11CountTo name ipat = innerJoin $ (\i -> pStateF "button11" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

button11bus :: Signal Int -> Signal Double -> ControlSignal
button11bus busid pat = (pF "button11" pat) # (pI "^button11" busid)
button11recv :: Signal Int -> ControlSignal
button11recv busid = pI "^button11" busid

-- | 
button12 :: Signal Double -> ControlSignal
button12 = pF "button12"
button12Take :: String -> [Double] -> ControlSignal
button12Take name xs = pStateListF "button12" name xs
button12Count :: String -> ControlSignal
button12Count name = pStateF "button12" name (maybe 0 (+1))
button12CountTo :: String -> Signal Double -> Signal ValueMap
button12CountTo name ipat = innerJoin $ (\i -> pStateF "button12" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

button12bus :: Signal Int -> Signal Double -> ControlSignal
button12bus busid pat = (pF "button12" pat) # (pI "^button12" busid)
button12recv :: Signal Int -> ControlSignal
button12recv busid = pI "^button12" busid

-- | 
button13 :: Signal Double -> ControlSignal
button13 = pF "button13"
button13Take :: String -> [Double] -> ControlSignal
button13Take name xs = pStateListF "button13" name xs
button13Count :: String -> ControlSignal
button13Count name = pStateF "button13" name (maybe 0 (+1))
button13CountTo :: String -> Signal Double -> Signal ValueMap
button13CountTo name ipat = innerJoin $ (\i -> pStateF "button13" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

button13bus :: Signal Int -> Signal Double -> ControlSignal
button13bus busid pat = (pF "button13" pat) # (pI "^button13" busid)
button13recv :: Signal Int -> ControlSignal
button13recv busid = pI "^button13" busid

-- | 
button14 :: Signal Double -> ControlSignal
button14 = pF "button14"
button14Take :: String -> [Double] -> ControlSignal
button14Take name xs = pStateListF "button14" name xs
button14Count :: String -> ControlSignal
button14Count name = pStateF "button14" name (maybe 0 (+1))
button14CountTo :: String -> Signal Double -> Signal ValueMap
button14CountTo name ipat = innerJoin $ (\i -> pStateF "button14" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

button14bus :: Signal Int -> Signal Double -> ControlSignal
button14bus busid pat = (pF "button14" pat) # (pI "^button14" busid)
button14recv :: Signal Int -> ControlSignal
button14recv busid = pI "^button14" busid

-- | 
button15 :: Signal Double -> ControlSignal
button15 = pF "button15"
button15Take :: String -> [Double] -> ControlSignal
button15Take name xs = pStateListF "button15" name xs
button15Count :: String -> ControlSignal
button15Count name = pStateF "button15" name (maybe 0 (+1))
button15CountTo :: String -> Signal Double -> Signal ValueMap
button15CountTo name ipat = innerJoin $ (\i -> pStateF "button15" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

button15bus :: Signal Int -> Signal Double -> ControlSignal
button15bus busid pat = (pF "button15" pat) # (pI "^button15" busid)
button15recv :: Signal Int -> ControlSignal
button15recv busid = pI "^button15" busid

-- | 
button2 :: Signal Double -> ControlSignal
button2 = pF "button2"
button2Take :: String -> [Double] -> ControlSignal
button2Take name xs = pStateListF "button2" name xs
button2Count :: String -> ControlSignal
button2Count name = pStateF "button2" name (maybe 0 (+1))
button2CountTo :: String -> Signal Double -> Signal ValueMap
button2CountTo name ipat = innerJoin $ (\i -> pStateF "button2" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

button2bus :: Signal Int -> Signal Double -> ControlSignal
button2bus busid pat = (pF "button2" pat) # (pI "^button2" busid)
button2recv :: Signal Int -> ControlSignal
button2recv busid = pI "^button2" busid

-- | 
button3 :: Signal Double -> ControlSignal
button3 = pF "button3"
button3Take :: String -> [Double] -> ControlSignal
button3Take name xs = pStateListF "button3" name xs
button3Count :: String -> ControlSignal
button3Count name = pStateF "button3" name (maybe 0 (+1))
button3CountTo :: String -> Signal Double -> Signal ValueMap
button3CountTo name ipat = innerJoin $ (\i -> pStateF "button3" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

button3bus :: Signal Int -> Signal Double -> ControlSignal
button3bus busid pat = (pF "button3" pat) # (pI "^button3" busid)
button3recv :: Signal Int -> ControlSignal
button3recv busid = pI "^button3" busid

-- | 
button4 :: Signal Double -> ControlSignal
button4 = pF "button4"
button4Take :: String -> [Double] -> ControlSignal
button4Take name xs = pStateListF "button4" name xs
button4Count :: String -> ControlSignal
button4Count name = pStateF "button4" name (maybe 0 (+1))
button4CountTo :: String -> Signal Double -> Signal ValueMap
button4CountTo name ipat = innerJoin $ (\i -> pStateF "button4" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

button4bus :: Signal Int -> Signal Double -> ControlSignal
button4bus busid pat = (pF "button4" pat) # (pI "^button4" busid)
button4recv :: Signal Int -> ControlSignal
button4recv busid = pI "^button4" busid

-- | 
button5 :: Signal Double -> ControlSignal
button5 = pF "button5"
button5Take :: String -> [Double] -> ControlSignal
button5Take name xs = pStateListF "button5" name xs
button5Count :: String -> ControlSignal
button5Count name = pStateF "button5" name (maybe 0 (+1))
button5CountTo :: String -> Signal Double -> Signal ValueMap
button5CountTo name ipat = innerJoin $ (\i -> pStateF "button5" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

button5bus :: Signal Int -> Signal Double -> ControlSignal
button5bus busid pat = (pF "button5" pat) # (pI "^button5" busid)
button5recv :: Signal Int -> ControlSignal
button5recv busid = pI "^button5" busid

-- | 
button6 :: Signal Double -> ControlSignal
button6 = pF "button6"
button6Take :: String -> [Double] -> ControlSignal
button6Take name xs = pStateListF "button6" name xs
button6Count :: String -> ControlSignal
button6Count name = pStateF "button6" name (maybe 0 (+1))
button6CountTo :: String -> Signal Double -> Signal ValueMap
button6CountTo name ipat = innerJoin $ (\i -> pStateF "button6" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

button6bus :: Signal Int -> Signal Double -> ControlSignal
button6bus busid pat = (pF "button6" pat) # (pI "^button6" busid)
button6recv :: Signal Int -> ControlSignal
button6recv busid = pI "^button6" busid

-- | 
button7 :: Signal Double -> ControlSignal
button7 = pF "button7"
button7Take :: String -> [Double] -> ControlSignal
button7Take name xs = pStateListF "button7" name xs
button7Count :: String -> ControlSignal
button7Count name = pStateF "button7" name (maybe 0 (+1))
button7CountTo :: String -> Signal Double -> Signal ValueMap
button7CountTo name ipat = innerJoin $ (\i -> pStateF "button7" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

button7bus :: Signal Int -> Signal Double -> ControlSignal
button7bus busid pat = (pF "button7" pat) # (pI "^button7" busid)
button7recv :: Signal Int -> ControlSignal
button7recv busid = pI "^button7" busid

-- | 
button8 :: Signal Double -> ControlSignal
button8 = pF "button8"
button8Take :: String -> [Double] -> ControlSignal
button8Take name xs = pStateListF "button8" name xs
button8Count :: String -> ControlSignal
button8Count name = pStateF "button8" name (maybe 0 (+1))
button8CountTo :: String -> Signal Double -> Signal ValueMap
button8CountTo name ipat = innerJoin $ (\i -> pStateF "button8" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

button8bus :: Signal Int -> Signal Double -> ControlSignal
button8bus busid pat = (pF "button8" pat) # (pI "^button8" busid)
button8recv :: Signal Int -> ControlSignal
button8recv busid = pI "^button8" busid

-- | 
button9 :: Signal Double -> ControlSignal
button9 = pF "button9"
button9Take :: String -> [Double] -> ControlSignal
button9Take name xs = pStateListF "button9" name xs
button9Count :: String -> ControlSignal
button9Count name = pStateF "button9" name (maybe 0 (+1))
button9CountTo :: String -> Signal Double -> Signal ValueMap
button9CountTo name ipat = innerJoin $ (\i -> pStateF "button9" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

button9bus :: Signal Int -> Signal Double -> ControlSignal
button9bus busid pat = (pF "button9" pat) # (pI "^button9" busid)
button9recv :: Signal Int -> ControlSignal
button9recv busid = pI "^button9" busid

-- | 
ccn :: Signal Double -> ControlSignal
ccn = pF "ccn"
ccnTake :: String -> [Double] -> ControlSignal
ccnTake name xs = pStateListF "ccn" name xs
ccnCount :: String -> ControlSignal
ccnCount name = pStateF "ccn" name (maybe 0 (+1))
ccnCountTo :: String -> Signal Double -> Signal ValueMap
ccnCountTo name ipat = innerJoin $ (\i -> pStateF "ccn" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

ccnbus :: Signal Int -> Signal Double -> ControlSignal
ccnbus _ _ = error $ "Control parameter 'ccn' can't be sent to a bus."

-- | 
ccv :: Signal Double -> ControlSignal
ccv = pF "ccv"
ccvTake :: String -> [Double] -> ControlSignal
ccvTake name xs = pStateListF "ccv" name xs
ccvCount :: String -> ControlSignal
ccvCount name = pStateF "ccv" name (maybe 0 (+1))
ccvCountTo :: String -> Signal Double -> Signal ValueMap
ccvCountTo name ipat = innerJoin $ (\i -> pStateF "ccv" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

ccvbus :: Signal Int -> Signal Double -> ControlSignal
ccvbus _ _ = error $ "Control parameter 'ccv' can't be sent to a bus."

-- | choose the channel the pattern is sent to in superdirt
channel :: Signal Int -> ControlSignal
channel = pI "channel"
channelTake :: String -> [Double] -> ControlSignal
channelTake name xs = pStateListF "channel" name xs
channelCount :: String -> ControlSignal
channelCount name = pStateF "channel" name (maybe 0 (+1))
channelCountTo :: String -> Signal Double -> Signal ValueMap
channelCountTo name ipat = innerJoin $ (\i -> pStateF "channel" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

channelbus :: Signal Int -> Signal Int -> ControlSignal
channelbus _ _ = error $ "Control parameter 'channel' can't be sent to a bus."

-- | 
clhatdecay :: Signal Double -> ControlSignal
clhatdecay = pF "clhatdecay"
clhatdecayTake :: String -> [Double] -> ControlSignal
clhatdecayTake name xs = pStateListF "clhatdecay" name xs
clhatdecayCount :: String -> ControlSignal
clhatdecayCount name = pStateF "clhatdecay" name (maybe 0 (+1))
clhatdecayCountTo :: String -> Signal Double -> Signal ValueMap
clhatdecayCountTo name ipat = innerJoin $ (\i -> pStateF "clhatdecay" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

clhatdecaybus :: Signal Int -> Signal Double -> ControlSignal
clhatdecaybus busid pat = (pF "clhatdecay" pat) # (pI "^clhatdecay" busid)
clhatdecayrecv :: Signal Int -> ControlSignal
clhatdecayrecv busid = pI "^clhatdecay" busid

-- | fake-resampling, a pattern of numbers for lowering the sample rate, i.e. 1 for original 2 for half, 3 for a third and so on.
coarse :: Signal Double -> ControlSignal
coarse = pF "coarse"
coarseTake :: String -> [Double] -> ControlSignal
coarseTake name xs = pStateListF "coarse" name xs
coarseCount :: String -> ControlSignal
coarseCount name = pStateF "coarse" name (maybe 0 (+1))
coarseCountTo :: String -> Signal Double -> Signal ValueMap
coarseCountTo name ipat = innerJoin $ (\i -> pStateF "coarse" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

coarsebus :: Signal Int -> Signal Double -> ControlSignal
coarsebus busid pat = (pF "coarse" pat) # (pI "^coarse" busid)
coarserecv :: Signal Int -> ControlSignal
coarserecv busid = pI "^coarse" busid

-- | Spectral comb
comb :: Signal Double -> ControlSignal
comb = pF "comb"
combTake :: String -> [Double] -> ControlSignal
combTake name xs = pStateListF "comb" name xs
combCount :: String -> ControlSignal
combCount name = pStateF "comb" name (maybe 0 (+1))
combCountTo :: String -> Signal Double -> Signal ValueMap
combCountTo name ipat = innerJoin $ (\i -> pStateF "comb" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

combbus :: Signal Int -> Signal Double -> ControlSignal
combbus busid pat = (pF "comb" pat) # (pI "^comb" busid)
combrecv :: Signal Int -> ControlSignal
combrecv busid = pI "^comb" busid

-- | 
control :: Signal Double -> ControlSignal
control = pF "control"
controlTake :: String -> [Double] -> ControlSignal
controlTake name xs = pStateListF "control" name xs
controlCount :: String -> ControlSignal
controlCount name = pStateF "control" name (maybe 0 (+1))
controlCountTo :: String -> Signal Double -> Signal ValueMap
controlCountTo name ipat = innerJoin $ (\i -> pStateF "control" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

controlbus :: Signal Int -> Signal Double -> ControlSignal
controlbus _ _ = error $ "Control parameter 'control' can't be sent to a bus."

-- | 
cps :: Signal Double -> ControlSignal
cps = pF "cps"
cpsTake :: String -> [Double] -> ControlSignal
cpsTake name xs = pStateListF "cps" name xs
cpsCount :: String -> ControlSignal
cpsCount name = pStateF "cps" name (maybe 0 (+1))
cpsCountTo :: String -> Signal Double -> Signal ValueMap
cpsCountTo name ipat = innerJoin $ (\i -> pStateF "cps" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

cpsbus :: Signal Int -> Signal Double -> ControlSignal
cpsbus busid pat = (pF "cps" pat) # (pI "^cps" busid)
cpsrecv :: Signal Int -> ControlSignal
cpsrecv busid = pI "^cps" busid

-- | bit crushing, a pattern of numbers from 1 (for drastic reduction in bit-depth) to 16 (for barely no reduction).
crush :: Signal Double -> ControlSignal
crush = pF "crush"
crushTake :: String -> [Double] -> ControlSignal
crushTake name xs = pStateListF "crush" name xs
crushCount :: String -> ControlSignal
crushCount name = pStateF "crush" name (maybe 0 (+1))
crushCountTo :: String -> Signal Double -> Signal ValueMap
crushCountTo name ipat = innerJoin $ (\i -> pStateF "crush" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

crushbus :: Signal Int -> Signal Double -> ControlSignal
crushbus busid pat = (pF "crush" pat) # (pI "^crush" busid)
crushrecv :: Signal Int -> ControlSignal
crushrecv busid = pI "^crush" busid

-- | 
ctlNum :: Signal Double -> ControlSignal
ctlNum = pF "ctlNum"
ctlNumTake :: String -> [Double] -> ControlSignal
ctlNumTake name xs = pStateListF "ctlNum" name xs
ctlNumCount :: String -> ControlSignal
ctlNumCount name = pStateF "ctlNum" name (maybe 0 (+1))
ctlNumCountTo :: String -> Signal Double -> Signal ValueMap
ctlNumCountTo name ipat = innerJoin $ (\i -> pStateF "ctlNum" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

ctlNumbus :: Signal Int -> Signal Double -> ControlSignal
ctlNumbus _ _ = error $ "Control parameter 'ctlNum' can't be sent to a bus."

-- | 
ctranspose :: Signal Double -> ControlSignal
ctranspose = pF "ctranspose"
ctransposeTake :: String -> [Double] -> ControlSignal
ctransposeTake name xs = pStateListF "ctranspose" name xs
ctransposeCount :: String -> ControlSignal
ctransposeCount name = pStateF "ctranspose" name (maybe 0 (+1))
ctransposeCountTo :: String -> Signal Double -> Signal ValueMap
ctransposeCountTo name ipat = innerJoin $ (\i -> pStateF "ctranspose" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

ctransposebus :: Signal Int -> Signal Double -> ControlSignal
ctransposebus busid pat = (pF "ctranspose" pat) # (pI "^ctranspose" busid)
ctransposerecv :: Signal Int -> ControlSignal
ctransposerecv busid = pI "^ctranspose" busid

-- | In the style of classic drum-machines, `cut` will stop a playing sample as soon as another samples with in same cutgroup is to be played. An example would be an open hi-hat followed by a closed one, essentially muting the open.
cut :: Signal Int -> ControlSignal
cut = pI "cut"
cutTake :: String -> [Double] -> ControlSignal
cutTake name xs = pStateListF "cut" name xs
cutCount :: String -> ControlSignal
cutCount name = pStateF "cut" name (maybe 0 (+1))
cutCountTo :: String -> Signal Double -> Signal ValueMap
cutCountTo name ipat = innerJoin $ (\i -> pStateF "cut" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

cutbus :: Signal Int -> Signal Int -> ControlSignal
cutbus busid pat = (pI "cut" pat) # (pI "^cut" busid)
cutrecv :: Signal Int -> ControlSignal
cutrecv busid = pI "^cut" busid

-- | a pattern of numbers from 0 to 1. Applies the cutoff frequency of the low-pass filter.
cutoff :: Signal Double -> ControlSignal
cutoff = pF "cutoff"
cutoffTake :: String -> [Double] -> ControlSignal
cutoffTake name xs = pStateListF "cutoff" name xs
cutoffCount :: String -> ControlSignal
cutoffCount name = pStateF "cutoff" name (maybe 0 (+1))
cutoffCountTo :: String -> Signal Double -> Signal ValueMap
cutoffCountTo name ipat = innerJoin $ (\i -> pStateF "cutoff" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

cutoffbus :: Signal Int -> Signal Double -> ControlSignal
cutoffbus busid pat = (pF "cutoff" pat) # (pI "^cutoff" busid)
cutoffrecv :: Signal Int -> ControlSignal
cutoffrecv busid = pI "^cutoff" busid

-- | 
cutoffegint :: Signal Double -> ControlSignal
cutoffegint = pF "cutoffegint"
cutoffegintTake :: String -> [Double] -> ControlSignal
cutoffegintTake name xs = pStateListF "cutoffegint" name xs
cutoffegintCount :: String -> ControlSignal
cutoffegintCount name = pStateF "cutoffegint" name (maybe 0 (+1))
cutoffegintCountTo :: String -> Signal Double -> Signal ValueMap
cutoffegintCountTo name ipat = innerJoin $ (\i -> pStateF "cutoffegint" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

cutoffegintbus :: Signal Int -> Signal Double -> ControlSignal
cutoffegintbus busid pat = (pF "cutoffegint" pat) # (pI "^cutoffegint" busid)
cutoffegintrecv :: Signal Int -> ControlSignal
cutoffegintrecv busid = pI "^cutoffegint" busid

-- | 
decay :: Signal Double -> ControlSignal
decay = pF "decay"
decayTake :: String -> [Double] -> ControlSignal
decayTake name xs = pStateListF "decay" name xs
decayCount :: String -> ControlSignal
decayCount name = pStateF "decay" name (maybe 0 (+1))
decayCountTo :: String -> Signal Double -> Signal ValueMap
decayCountTo name ipat = innerJoin $ (\i -> pStateF "decay" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

decaybus :: Signal Int -> Signal Double -> ControlSignal
decaybus busid pat = (pF "decay" pat) # (pI "^decay" busid)
decayrecv :: Signal Int -> ControlSignal
decayrecv busid = pI "^decay" busid

-- | 
degree :: Signal Double -> ControlSignal
degree = pF "degree"
degreeTake :: String -> [Double] -> ControlSignal
degreeTake name xs = pStateListF "degree" name xs
degreeCount :: String -> ControlSignal
degreeCount name = pStateF "degree" name (maybe 0 (+1))
degreeCountTo :: String -> Signal Double -> Signal ValueMap
degreeCountTo name ipat = innerJoin $ (\i -> pStateF "degree" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

degreebus :: Signal Int -> Signal Double -> ControlSignal
degreebus busid pat = (pF "degree" pat) # (pI "^degree" busid)
degreerecv :: Signal Int -> ControlSignal
degreerecv busid = pI "^degree" busid

-- | a pattern of numbers from 0 to 1. Sets the level of the delay signal.
delay :: Signal Double -> ControlSignal
delay = pF "delay"
delayTake :: String -> [Double] -> ControlSignal
delayTake name xs = pStateListF "delay" name xs
delayCount :: String -> ControlSignal
delayCount name = pStateF "delay" name (maybe 0 (+1))
delayCountTo :: String -> Signal Double -> Signal ValueMap
delayCountTo name ipat = innerJoin $ (\i -> pStateF "delay" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

delaybus :: Signal Int -> Signal Double -> ControlSignal
delaybus busid pat = (pF "delay" pat) # (pI "^delay" busid)
delayrecv :: Signal Int -> ControlSignal
delayrecv busid = pI "^delay" busid

-- | a pattern of numbers from 0 to 1. Sets the amount of delay feedback.
delayfeedback :: Signal Double -> ControlSignal
delayfeedback = pF "delayfeedback"
delayfeedbackTake :: String -> [Double] -> ControlSignal
delayfeedbackTake name xs = pStateListF "delayfeedback" name xs
delayfeedbackCount :: String -> ControlSignal
delayfeedbackCount name = pStateF "delayfeedback" name (maybe 0 (+1))
delayfeedbackCountTo :: String -> Signal Double -> Signal ValueMap
delayfeedbackCountTo name ipat = innerJoin $ (\i -> pStateF "delayfeedback" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

delayfeedbackbus :: Signal Int -> Signal Double -> ControlSignal
delayfeedbackbus busid pat = (pF "delayfeedback" pat) # (pI "^delayfeedback" busid)
delayfeedbackrecv :: Signal Int -> ControlSignal
delayfeedbackrecv busid = pI "^delayfeedback" busid

-- | a pattern of numbers from 0 to 1. Sets the length of the delay.
delaytime :: Signal Double -> ControlSignal
delaytime = pF "delaytime"
delaytimeTake :: String -> [Double] -> ControlSignal
delaytimeTake name xs = pStateListF "delaytime" name xs
delaytimeCount :: String -> ControlSignal
delaytimeCount name = pStateF "delaytime" name (maybe 0 (+1))
delaytimeCountTo :: String -> Signal Double -> Signal ValueMap
delaytimeCountTo name ipat = innerJoin $ (\i -> pStateF "delaytime" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

delaytimebus :: Signal Int -> Signal Double -> ControlSignal
delaytimebus busid pat = (pF "delaytime" pat) # (pI "^delaytime" busid)
delaytimerecv :: Signal Int -> ControlSignal
delaytimerecv busid = pI "^delaytime" busid

-- | 
detune :: Signal Double -> ControlSignal
detune = pF "detune"
detuneTake :: String -> [Double] -> ControlSignal
detuneTake name xs = pStateListF "detune" name xs
detuneCount :: String -> ControlSignal
detuneCount name = pStateF "detune" name (maybe 0 (+1))
detuneCountTo :: String -> Signal Double -> Signal ValueMap
detuneCountTo name ipat = innerJoin $ (\i -> pStateF "detune" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

detunebus :: Signal Int -> Signal Double -> ControlSignal
detunebus busid pat = (pF "detune" pat) # (pI "^detune" busid)
detunerecv :: Signal Int -> ControlSignal
detunerecv busid = pI "^detune" busid

-- | noisy fuzzy distortion
distort :: Signal Double -> ControlSignal
distort = pF "distort"
distortTake :: String -> [Double] -> ControlSignal
distortTake name xs = pStateListF "distort" name xs
distortCount :: String -> ControlSignal
distortCount name = pStateF "distort" name (maybe 0 (+1))
distortCountTo :: String -> Signal Double -> Signal ValueMap
distortCountTo name ipat = innerJoin $ (\i -> pStateF "distort" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

distortbus :: Signal Int -> Signal Double -> ControlSignal
distortbus busid pat = (pF "distort" pat) # (pI "^distort" busid)
distortrecv :: Signal Int -> ControlSignal
distortrecv busid = pI "^distort" busid

-- | DJ filter, below 0.5 is low pass filter, above is high pass filter.
djf :: Signal Double -> ControlSignal
djf = pF "djf"
djfTake :: String -> [Double] -> ControlSignal
djfTake name xs = pStateListF "djf" name xs
djfCount :: String -> ControlSignal
djfCount name = pStateF "djf" name (maybe 0 (+1))
djfCountTo :: String -> Signal Double -> Signal ValueMap
djfCountTo name ipat = innerJoin $ (\i -> pStateF "djf" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

djfbus :: Signal Int -> Signal Double -> ControlSignal
djfbus busid pat = (pF "djf" pat) # (pI "^djf" busid)
djfrecv :: Signal Int -> ControlSignal
djfrecv busid = pI "^djf" busid

-- | when set to `1` will disable all reverb for this pattern. See `room` and `size` for more information about reverb.
dry :: Signal Double -> ControlSignal
dry = pF "dry"
dryTake :: String -> [Double] -> ControlSignal
dryTake name xs = pStateListF "dry" name xs
dryCount :: String -> ControlSignal
dryCount name = pStateF "dry" name (maybe 0 (+1))
dryCountTo :: String -> Signal Double -> Signal ValueMap
dryCountTo name ipat = innerJoin $ (\i -> pStateF "dry" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

drybus :: Signal Int -> Signal Double -> ControlSignal
drybus busid pat = (pF "dry" pat) # (pI "^dry" busid)
dryrecv :: Signal Int -> ControlSignal
dryrecv busid = pI "^dry" busid

-- | 
dur :: Signal Double -> ControlSignal
dur = pF "dur"
durTake :: String -> [Double] -> ControlSignal
durTake name xs = pStateListF "dur" name xs
durCount :: String -> ControlSignal
durCount name = pStateF "dur" name (maybe 0 (+1))
durCountTo :: String -> Signal Double -> Signal ValueMap
durCountTo name ipat = innerJoin $ (\i -> pStateF "dur" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

durbus :: Signal Int -> Signal Double -> ControlSignal
durbus busid pat = (pF "dur" pat) # (pI "^dur" busid)
durrecv :: Signal Int -> ControlSignal
durrecv busid = pI "^dur" busid

-- | the same as `begin`, but cuts the end off samples, shortening them; e.g. `0.75` to cut off the last quarter of each sample.
end :: Signal Double -> ControlSignal
end = pF "end"
endTake :: String -> [Double] -> ControlSignal
endTake name xs = pStateListF "end" name xs
endCount :: String -> ControlSignal
endCount name = pStateF "end" name (maybe 0 (+1))
endCountTo :: String -> Signal Double -> Signal ValueMap
endCountTo name ipat = innerJoin $ (\i -> pStateF "end" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

endbus :: Signal Int -> Signal Double -> ControlSignal
endbus _ _ = error $ "Control parameter 'end' can't be sent to a bus."

-- | Spectral enhance
enhance :: Signal Double -> ControlSignal
enhance = pF "enhance"
enhanceTake :: String -> [Double] -> ControlSignal
enhanceTake name xs = pStateListF "enhance" name xs
enhanceCount :: String -> ControlSignal
enhanceCount name = pStateF "enhance" name (maybe 0 (+1))
enhanceCountTo :: String -> Signal Double -> Signal ValueMap
enhanceCountTo name ipat = innerJoin $ (\i -> pStateF "enhance" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

enhancebus :: Signal Int -> Signal Double -> ControlSignal
enhancebus busid pat = (pF "enhance" pat) # (pI "^enhance" busid)
enhancerecv :: Signal Int -> ControlSignal
enhancerecv busid = pI "^enhance" busid

-- | 
expression :: Signal Double -> ControlSignal
expression = pF "expression"
expressionTake :: String -> [Double] -> ControlSignal
expressionTake name xs = pStateListF "expression" name xs
expressionCount :: String -> ControlSignal
expressionCount name = pStateF "expression" name (maybe 0 (+1))
expressionCountTo :: String -> Signal Double -> Signal ValueMap
expressionCountTo name ipat = innerJoin $ (\i -> pStateF "expression" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

expressionbus :: Signal Int -> Signal Double -> ControlSignal
expressionbus busid pat = (pF "expression" pat) # (pI "^expression" busid)
expressionrecv :: Signal Int -> ControlSignal
expressionrecv busid = pI "^expression" busid

-- | As with fadeTime, but controls the fade in time of the grain envelope. Not used if the grain begins at position 0 in the sample.
fadeInTime :: Signal Double -> ControlSignal
fadeInTime = pF "fadeInTime"
fadeInTimeTake :: String -> [Double] -> ControlSignal
fadeInTimeTake name xs = pStateListF "fadeInTime" name xs
fadeInTimeCount :: String -> ControlSignal
fadeInTimeCount name = pStateF "fadeInTime" name (maybe 0 (+1))
fadeInTimeCountTo :: String -> Signal Double -> Signal ValueMap
fadeInTimeCountTo name ipat = innerJoin $ (\i -> pStateF "fadeInTime" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

fadeInTimebus :: Signal Int -> Signal Double -> ControlSignal
fadeInTimebus _ _ = error $ "Control parameter 'fadeInTime' can't be sent to a bus."

-- | Used when using begin/end or chop/striate and friends, to change the fade out time of the 'grain' envelope.
fadeTime :: Signal Double -> ControlSignal
fadeTime = pF "fadeTime"
fadeTimeTake :: String -> [Double] -> ControlSignal
fadeTimeTake name xs = pStateListF "fadeTime" name xs
fadeTimeCount :: String -> ControlSignal
fadeTimeCount name = pStateF "fadeTime" name (maybe 0 (+1))
fadeTimeCountTo :: String -> Signal Double -> Signal ValueMap
fadeTimeCountTo name ipat = innerJoin $ (\i -> pStateF "fadeTime" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

fadeTimebus :: Signal Int -> Signal Double -> ControlSignal
fadeTimebus _ _ = error $ "Control parameter 'fadeTime' can't be sent to a bus."

-- | 
frameRate :: Signal Double -> ControlSignal
frameRate = pF "frameRate"
frameRateTake :: String -> [Double] -> ControlSignal
frameRateTake name xs = pStateListF "frameRate" name xs
frameRateCount :: String -> ControlSignal
frameRateCount name = pStateF "frameRate" name (maybe 0 (+1))
frameRateCountTo :: String -> Signal Double -> Signal ValueMap
frameRateCountTo name ipat = innerJoin $ (\i -> pStateF "frameRate" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

frameRatebus :: Signal Int -> Signal Double -> ControlSignal
frameRatebus _ _ = error $ "Control parameter 'frameRate' can't be sent to a bus."

-- | 
frames :: Signal Double -> ControlSignal
frames = pF "frames"
framesTake :: String -> [Double] -> ControlSignal
framesTake name xs = pStateListF "frames" name xs
framesCount :: String -> ControlSignal
framesCount name = pStateF "frames" name (maybe 0 (+1))
framesCountTo :: String -> Signal Double -> Signal ValueMap
framesCountTo name ipat = innerJoin $ (\i -> pStateF "frames" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

framesbus :: Signal Int -> Signal Double -> ControlSignal
framesbus _ _ = error $ "Control parameter 'frames' can't be sent to a bus."

-- | Spectral freeze
freeze :: Signal Double -> ControlSignal
freeze = pF "freeze"
freezeTake :: String -> [Double] -> ControlSignal
freezeTake name xs = pStateListF "freeze" name xs
freezeCount :: String -> ControlSignal
freezeCount name = pStateF "freeze" name (maybe 0 (+1))
freezeCountTo :: String -> Signal Double -> Signal ValueMap
freezeCountTo name ipat = innerJoin $ (\i -> pStateF "freeze" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

freezebus :: Signal Int -> Signal Double -> ControlSignal
freezebus busid pat = (pF "freeze" pat) # (pI "^freeze" busid)
freezerecv :: Signal Int -> ControlSignal
freezerecv busid = pI "^freeze" busid

-- | 
freq :: Signal Double -> ControlSignal
freq = pF "freq"
freqTake :: String -> [Double] -> ControlSignal
freqTake name xs = pStateListF "freq" name xs
freqCount :: String -> ControlSignal
freqCount name = pStateF "freq" name (maybe 0 (+1))
freqCountTo :: String -> Signal Double -> Signal ValueMap
freqCountTo name ipat = innerJoin $ (\i -> pStateF "freq" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

freqbus :: Signal Int -> Signal Double -> ControlSignal
freqbus busid pat = (pF "freq" pat) # (pI "^freq" busid)
freqrecv :: Signal Int -> ControlSignal
freqrecv busid = pI "^freq" busid

-- | for internal sound routing
from :: Signal Double -> ControlSignal
from = pF "from"
fromTake :: String -> [Double] -> ControlSignal
fromTake name xs = pStateListF "from" name xs
fromCount :: String -> ControlSignal
fromCount name = pStateF "from" name (maybe 0 (+1))
fromCountTo :: String -> Signal Double -> Signal ValueMap
fromCountTo name ipat = innerJoin $ (\i -> pStateF "from" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

frombus :: Signal Int -> Signal Double -> ControlSignal
frombus busid pat = (pF "from" pat) # (pI "^from" busid)
fromrecv :: Signal Int -> ControlSignal
fromrecv busid = pI "^from" busid

-- | frequency shifter
fshift :: Signal Double -> ControlSignal
fshift = pF "fshift"
fshiftTake :: String -> [Double] -> ControlSignal
fshiftTake name xs = pStateListF "fshift" name xs
fshiftCount :: String -> ControlSignal
fshiftCount name = pStateF "fshift" name (maybe 0 (+1))
fshiftCountTo :: String -> Signal Double -> Signal ValueMap
fshiftCountTo name ipat = innerJoin $ (\i -> pStateF "fshift" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

fshiftbus :: Signal Int -> Signal Double -> ControlSignal
fshiftbus busid pat = (pF "fshift" pat) # (pI "^fshift" busid)
fshiftrecv :: Signal Int -> ControlSignal
fshiftrecv busid = pI "^fshift" busid

-- | frequency shifter
fshiftnote :: Signal Double -> ControlSignal
fshiftnote = pF "fshiftnote"
fshiftnoteTake :: String -> [Double] -> ControlSignal
fshiftnoteTake name xs = pStateListF "fshiftnote" name xs
fshiftnoteCount :: String -> ControlSignal
fshiftnoteCount name = pStateF "fshiftnote" name (maybe 0 (+1))
fshiftnoteCountTo :: String -> Signal Double -> Signal ValueMap
fshiftnoteCountTo name ipat = innerJoin $ (\i -> pStateF "fshiftnote" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

fshiftnotebus :: Signal Int -> Signal Double -> ControlSignal
fshiftnotebus busid pat = (pF "fshiftnote" pat) # (pI "^fshiftnote" busid)
fshiftnoterecv :: Signal Int -> ControlSignal
fshiftnoterecv busid = pI "^fshiftnote" busid

-- | frequency shifter
fshiftphase :: Signal Double -> ControlSignal
fshiftphase = pF "fshiftphase"
fshiftphaseTake :: String -> [Double] -> ControlSignal
fshiftphaseTake name xs = pStateListF "fshiftphase" name xs
fshiftphaseCount :: String -> ControlSignal
fshiftphaseCount name = pStateF "fshiftphase" name (maybe 0 (+1))
fshiftphaseCountTo :: String -> Signal Double -> Signal ValueMap
fshiftphaseCountTo name ipat = innerJoin $ (\i -> pStateF "fshiftphase" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

fshiftphasebus :: Signal Int -> Signal Double -> ControlSignal
fshiftphasebus busid pat = (pF "fshiftphase" pat) # (pI "^fshiftphase" busid)
fshiftphaserecv :: Signal Int -> ControlSignal
fshiftphaserecv busid = pI "^fshiftphase" busid

-- | a pattern of numbers that specify volume. Values less than 1 make the sound quieter. Values greater than 1 make the sound louder. For the linear equivalent, see @amp@.
gain :: Signal Double -> ControlSignal
gain = pF "gain"
gainTake :: String -> [Double] -> ControlSignal
gainTake name xs = pStateListF "gain" name xs
gainCount :: String -> ControlSignal
gainCount name = pStateF "gain" name (maybe 0 (+1))
gainCountTo :: String -> Signal Double -> Signal ValueMap
gainCountTo name ipat = innerJoin $ (\i -> pStateF "gain" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

gainbus :: Signal Int -> Signal Double -> ControlSignal
gainbus _ _ = error $ "Control parameter 'gain' can't be sent to a bus."

-- | 
gate :: Signal Double -> ControlSignal
gate = pF "gate"
gateTake :: String -> [Double] -> ControlSignal
gateTake name xs = pStateListF "gate" name xs
gateCount :: String -> ControlSignal
gateCount name = pStateF "gate" name (maybe 0 (+1))
gateCountTo :: String -> Signal Double -> Signal ValueMap
gateCountTo name ipat = innerJoin $ (\i -> pStateF "gate" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

gatebus :: Signal Int -> Signal Double -> ControlSignal
gatebus busid pat = (pF "gate" pat) # (pI "^gate" busid)
gaterecv :: Signal Int -> ControlSignal
gaterecv busid = pI "^gate" busid

-- | 
harmonic :: Signal Double -> ControlSignal
harmonic = pF "harmonic"
harmonicTake :: String -> [Double] -> ControlSignal
harmonicTake name xs = pStateListF "harmonic" name xs
harmonicCount :: String -> ControlSignal
harmonicCount name = pStateF "harmonic" name (maybe 0 (+1))
harmonicCountTo :: String -> Signal Double -> Signal ValueMap
harmonicCountTo name ipat = innerJoin $ (\i -> pStateF "harmonic" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

harmonicbus :: Signal Int -> Signal Double -> ControlSignal
harmonicbus busid pat = (pF "harmonic" pat) # (pI "^harmonic" busid)
harmonicrecv :: Signal Int -> ControlSignal
harmonicrecv busid = pI "^harmonic" busid

-- | 
hatgrain :: Signal Double -> ControlSignal
hatgrain = pF "hatgrain"
hatgrainTake :: String -> [Double] -> ControlSignal
hatgrainTake name xs = pStateListF "hatgrain" name xs
hatgrainCount :: String -> ControlSignal
hatgrainCount name = pStateF "hatgrain" name (maybe 0 (+1))
hatgrainCountTo :: String -> Signal Double -> Signal ValueMap
hatgrainCountTo name ipat = innerJoin $ (\i -> pStateF "hatgrain" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

hatgrainbus :: Signal Int -> Signal Double -> ControlSignal
hatgrainbus busid pat = (pF "hatgrain" pat) # (pI "^hatgrain" busid)
hatgrainrecv :: Signal Int -> ControlSignal
hatgrainrecv busid = pI "^hatgrain" busid

-- | High pass sort of spectral filter
hbrick :: Signal Double -> ControlSignal
hbrick = pF "hbrick"
hbrickTake :: String -> [Double] -> ControlSignal
hbrickTake name xs = pStateListF "hbrick" name xs
hbrickCount :: String -> ControlSignal
hbrickCount name = pStateF "hbrick" name (maybe 0 (+1))
hbrickCountTo :: String -> Signal Double -> Signal ValueMap
hbrickCountTo name ipat = innerJoin $ (\i -> pStateF "hbrick" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

hbrickbus :: Signal Int -> Signal Double -> ControlSignal
hbrickbus busid pat = (pF "hbrick" pat) # (pI "^hbrick" busid)
hbrickrecv :: Signal Int -> ControlSignal
hbrickrecv busid = pI "^hbrick" busid

-- | a pattern of numbers from 0 to 1. Applies the cutoff frequency of the high-pass filter. Also has alias @hpf@
hcutoff :: Signal Double -> ControlSignal
hcutoff = pF "hcutoff"
hcutoffTake :: String -> [Double] -> ControlSignal
hcutoffTake name xs = pStateListF "hcutoff" name xs
hcutoffCount :: String -> ControlSignal
hcutoffCount name = pStateF "hcutoff" name (maybe 0 (+1))
hcutoffCountTo :: String -> Signal Double -> Signal ValueMap
hcutoffCountTo name ipat = innerJoin $ (\i -> pStateF "hcutoff" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

hcutoffbus :: Signal Int -> Signal Double -> ControlSignal
hcutoffbus busid pat = (pF "hcutoff" pat) # (pI "^hcutoff" busid)
hcutoffrecv :: Signal Int -> ControlSignal
hcutoffrecv busid = pI "^hcutoff" busid

-- | a pattern of numbers to specify the hold time (in seconds) of an envelope applied to each sample. Only takes effect if `attack` and `release` are also specified.
hold :: Signal Double -> ControlSignal
hold = pF "hold"
holdTake :: String -> [Double] -> ControlSignal
holdTake name xs = pStateListF "hold" name xs
holdCount :: String -> ControlSignal
holdCount name = pStateF "hold" name (maybe 0 (+1))
holdCountTo :: String -> Signal Double -> Signal ValueMap
holdCountTo name ipat = innerJoin $ (\i -> pStateF "hold" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

holdbus :: Signal Int -> Signal Double -> ControlSignal
holdbus busid pat = (pF "hold" pat) # (pI "^hold" busid)
holdrecv :: Signal Int -> ControlSignal
holdrecv busid = pI "^hold" busid

-- | 
hours :: Signal Double -> ControlSignal
hours = pF "hours"
hoursTake :: String -> [Double] -> ControlSignal
hoursTake name xs = pStateListF "hours" name xs
hoursCount :: String -> ControlSignal
hoursCount name = pStateF "hours" name (maybe 0 (+1))
hoursCountTo :: String -> Signal Double -> Signal ValueMap
hoursCountTo name ipat = innerJoin $ (\i -> pStateF "hours" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

hoursbus :: Signal Int -> Signal Double -> ControlSignal
hoursbus _ _ = error $ "Control parameter 'hours' can't be sent to a bus."

-- | a pattern of numbers from 0 to 1. Applies the resonance of the high-pass filter. Has alias @hpq@
hresonance :: Signal Double -> ControlSignal
hresonance = pF "hresonance"
hresonanceTake :: String -> [Double] -> ControlSignal
hresonanceTake name xs = pStateListF "hresonance" name xs
hresonanceCount :: String -> ControlSignal
hresonanceCount name = pStateF "hresonance" name (maybe 0 (+1))
hresonanceCountTo :: String -> Signal Double -> Signal ValueMap
hresonanceCountTo name ipat = innerJoin $ (\i -> pStateF "hresonance" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

hresonancebus :: Signal Int -> Signal Double -> ControlSignal
hresonancebus busid pat = (pF "hresonance" pat) # (pI "^hresonance" busid)
hresonancerecv :: Signal Int -> ControlSignal
hresonancerecv busid = pI "^hresonance" busid

-- | 
imag :: Signal Double -> ControlSignal
imag = pF "imag"
imagTake :: String -> [Double] -> ControlSignal
imagTake name xs = pStateListF "imag" name xs
imagCount :: String -> ControlSignal
imagCount name = pStateF "imag" name (maybe 0 (+1))
imagCountTo :: String -> Signal Double -> Signal ValueMap
imagCountTo name ipat = innerJoin $ (\i -> pStateF "imag" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

imagbus :: Signal Int -> Signal Double -> ControlSignal
imagbus busid pat = (pF "imag" pat) # (pI "^imag" busid)
imagrecv :: Signal Int -> ControlSignal
imagrecv busid = pI "^imag" busid

-- | 
kcutoff :: Signal Double -> ControlSignal
kcutoff = pF "kcutoff"
kcutoffTake :: String -> [Double] -> ControlSignal
kcutoffTake name xs = pStateListF "kcutoff" name xs
kcutoffCount :: String -> ControlSignal
kcutoffCount name = pStateF "kcutoff" name (maybe 0 (+1))
kcutoffCountTo :: String -> Signal Double -> Signal ValueMap
kcutoffCountTo name ipat = innerJoin $ (\i -> pStateF "kcutoff" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

kcutoffbus :: Signal Int -> Signal Double -> ControlSignal
kcutoffbus busid pat = (pF "kcutoff" pat) # (pI "^kcutoff" busid)
kcutoffrecv :: Signal Int -> ControlSignal
kcutoffrecv busid = pI "^kcutoff" busid

-- | shape/bass enhancer
krush :: Signal Double -> ControlSignal
krush = pF "krush"
krushTake :: String -> [Double] -> ControlSignal
krushTake name xs = pStateListF "krush" name xs
krushCount :: String -> ControlSignal
krushCount name = pStateF "krush" name (maybe 0 (+1))
krushCountTo :: String -> Signal Double -> Signal ValueMap
krushCountTo name ipat = innerJoin $ (\i -> pStateF "krush" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

krushbus :: Signal Int -> Signal Double -> ControlSignal
krushbus busid pat = (pF "krush" pat) # (pI "^krush" busid)
krushrecv :: Signal Int -> ControlSignal
krushrecv busid = pI "^krush" busid

-- | 
lagogo :: Signal Double -> ControlSignal
lagogo = pF "lagogo"
lagogoTake :: String -> [Double] -> ControlSignal
lagogoTake name xs = pStateListF "lagogo" name xs
lagogoCount :: String -> ControlSignal
lagogoCount name = pStateF "lagogo" name (maybe 0 (+1))
lagogoCountTo :: String -> Signal Double -> Signal ValueMap
lagogoCountTo name ipat = innerJoin $ (\i -> pStateF "lagogo" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lagogobus :: Signal Int -> Signal Double -> ControlSignal
lagogobus busid pat = (pF "lagogo" pat) # (pI "^lagogo" busid)
lagogorecv :: Signal Int -> ControlSignal
lagogorecv busid = pI "^lagogo" busid

-- | Low pass sort of spectral filter
lbrick :: Signal Double -> ControlSignal
lbrick = pF "lbrick"
lbrickTake :: String -> [Double] -> ControlSignal
lbrickTake name xs = pStateListF "lbrick" name xs
lbrickCount :: String -> ControlSignal
lbrickCount name = pStateF "lbrick" name (maybe 0 (+1))
lbrickCountTo :: String -> Signal Double -> Signal ValueMap
lbrickCountTo name ipat = innerJoin $ (\i -> pStateF "lbrick" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lbrickbus :: Signal Int -> Signal Double -> ControlSignal
lbrickbus busid pat = (pF "lbrick" pat) # (pI "^lbrick" busid)
lbrickrecv :: Signal Int -> ControlSignal
lbrickrecv busid = pI "^lbrick" busid

-- | 
lclap :: Signal Double -> ControlSignal
lclap = pF "lclap"
lclapTake :: String -> [Double] -> ControlSignal
lclapTake name xs = pStateListF "lclap" name xs
lclapCount :: String -> ControlSignal
lclapCount name = pStateF "lclap" name (maybe 0 (+1))
lclapCountTo :: String -> Signal Double -> Signal ValueMap
lclapCountTo name ipat = innerJoin $ (\i -> pStateF "lclap" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lclapbus :: Signal Int -> Signal Double -> ControlSignal
lclapbus busid pat = (pF "lclap" pat) # (pI "^lclap" busid)
lclaprecv :: Signal Int -> ControlSignal
lclaprecv busid = pI "^lclap" busid

-- | 
lclaves :: Signal Double -> ControlSignal
lclaves = pF "lclaves"
lclavesTake :: String -> [Double] -> ControlSignal
lclavesTake name xs = pStateListF "lclaves" name xs
lclavesCount :: String -> ControlSignal
lclavesCount name = pStateF "lclaves" name (maybe 0 (+1))
lclavesCountTo :: String -> Signal Double -> Signal ValueMap
lclavesCountTo name ipat = innerJoin $ (\i -> pStateF "lclaves" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lclavesbus :: Signal Int -> Signal Double -> ControlSignal
lclavesbus busid pat = (pF "lclaves" pat) # (pI "^lclaves" busid)
lclavesrecv :: Signal Int -> ControlSignal
lclavesrecv busid = pI "^lclaves" busid

-- | 
lclhat :: Signal Double -> ControlSignal
lclhat = pF "lclhat"
lclhatTake :: String -> [Double] -> ControlSignal
lclhatTake name xs = pStateListF "lclhat" name xs
lclhatCount :: String -> ControlSignal
lclhatCount name = pStateF "lclhat" name (maybe 0 (+1))
lclhatCountTo :: String -> Signal Double -> Signal ValueMap
lclhatCountTo name ipat = innerJoin $ (\i -> pStateF "lclhat" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lclhatbus :: Signal Int -> Signal Double -> ControlSignal
lclhatbus busid pat = (pF "lclhat" pat) # (pI "^lclhat" busid)
lclhatrecv :: Signal Int -> ControlSignal
lclhatrecv busid = pI "^lclhat" busid

-- | 
lcrash :: Signal Double -> ControlSignal
lcrash = pF "lcrash"
lcrashTake :: String -> [Double] -> ControlSignal
lcrashTake name xs = pStateListF "lcrash" name xs
lcrashCount :: String -> ControlSignal
lcrashCount name = pStateF "lcrash" name (maybe 0 (+1))
lcrashCountTo :: String -> Signal Double -> Signal ValueMap
lcrashCountTo name ipat = innerJoin $ (\i -> pStateF "lcrash" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lcrashbus :: Signal Int -> Signal Double -> ControlSignal
lcrashbus busid pat = (pF "lcrash" pat) # (pI "^lcrash" busid)
lcrashrecv :: Signal Int -> ControlSignal
lcrashrecv busid = pI "^lcrash" busid

-- | controls the amount of overlap between two adjacent sounds
legato :: Signal Double -> ControlSignal
legato = pF "legato"
legatoTake :: String -> [Double] -> ControlSignal
legatoTake name xs = pStateListF "legato" name xs
legatoCount :: String -> ControlSignal
legatoCount name = pStateF "legato" name (maybe 0 (+1))
legatoCountTo :: String -> Signal Double -> Signal ValueMap
legatoCountTo name ipat = innerJoin $ (\i -> pStateF "legato" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

legatobus :: Signal Int -> Signal Double -> ControlSignal
legatobus _ _ = error $ "Control parameter 'legato' can't be sent to a bus."

-- | 
leslie :: Signal Double -> ControlSignal
leslie = pF "leslie"
leslieTake :: String -> [Double] -> ControlSignal
leslieTake name xs = pStateListF "leslie" name xs
leslieCount :: String -> ControlSignal
leslieCount name = pStateF "leslie" name (maybe 0 (+1))
leslieCountTo :: String -> Signal Double -> Signal ValueMap
leslieCountTo name ipat = innerJoin $ (\i -> pStateF "leslie" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lesliebus :: Signal Int -> Signal Double -> ControlSignal
lesliebus busid pat = (pF "leslie" pat) # (pI "^leslie" busid)
leslierecv :: Signal Int -> ControlSignal
leslierecv busid = pI "^leslie" busid

-- | 
lfo :: Signal Double -> ControlSignal
lfo = pF "lfo"
lfoTake :: String -> [Double] -> ControlSignal
lfoTake name xs = pStateListF "lfo" name xs
lfoCount :: String -> ControlSignal
lfoCount name = pStateF "lfo" name (maybe 0 (+1))
lfoCountTo :: String -> Signal Double -> Signal ValueMap
lfoCountTo name ipat = innerJoin $ (\i -> pStateF "lfo" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lfobus :: Signal Int -> Signal Double -> ControlSignal
lfobus busid pat = (pF "lfo" pat) # (pI "^lfo" busid)
lforecv :: Signal Int -> ControlSignal
lforecv busid = pI "^lfo" busid

-- | 
lfocutoffint :: Signal Double -> ControlSignal
lfocutoffint = pF "lfocutoffint"
lfocutoffintTake :: String -> [Double] -> ControlSignal
lfocutoffintTake name xs = pStateListF "lfocutoffint" name xs
lfocutoffintCount :: String -> ControlSignal
lfocutoffintCount name = pStateF "lfocutoffint" name (maybe 0 (+1))
lfocutoffintCountTo :: String -> Signal Double -> Signal ValueMap
lfocutoffintCountTo name ipat = innerJoin $ (\i -> pStateF "lfocutoffint" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lfocutoffintbus :: Signal Int -> Signal Double -> ControlSignal
lfocutoffintbus busid pat = (pF "lfocutoffint" pat) # (pI "^lfocutoffint" busid)
lfocutoffintrecv :: Signal Int -> ControlSignal
lfocutoffintrecv busid = pI "^lfocutoffint" busid

-- | 
lfodelay :: Signal Double -> ControlSignal
lfodelay = pF "lfodelay"
lfodelayTake :: String -> [Double] -> ControlSignal
lfodelayTake name xs = pStateListF "lfodelay" name xs
lfodelayCount :: String -> ControlSignal
lfodelayCount name = pStateF "lfodelay" name (maybe 0 (+1))
lfodelayCountTo :: String -> Signal Double -> Signal ValueMap
lfodelayCountTo name ipat = innerJoin $ (\i -> pStateF "lfodelay" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lfodelaybus :: Signal Int -> Signal Double -> ControlSignal
lfodelaybus busid pat = (pF "lfodelay" pat) # (pI "^lfodelay" busid)
lfodelayrecv :: Signal Int -> ControlSignal
lfodelayrecv busid = pI "^lfodelay" busid

-- | 
lfoint :: Signal Double -> ControlSignal
lfoint = pF "lfoint"
lfointTake :: String -> [Double] -> ControlSignal
lfointTake name xs = pStateListF "lfoint" name xs
lfointCount :: String -> ControlSignal
lfointCount name = pStateF "lfoint" name (maybe 0 (+1))
lfointCountTo :: String -> Signal Double -> Signal ValueMap
lfointCountTo name ipat = innerJoin $ (\i -> pStateF "lfoint" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lfointbus :: Signal Int -> Signal Double -> ControlSignal
lfointbus busid pat = (pF "lfoint" pat) # (pI "^lfoint" busid)
lfointrecv :: Signal Int -> ControlSignal
lfointrecv busid = pI "^lfoint" busid

-- | 
lfopitchint :: Signal Double -> ControlSignal
lfopitchint = pF "lfopitchint"
lfopitchintTake :: String -> [Double] -> ControlSignal
lfopitchintTake name xs = pStateListF "lfopitchint" name xs
lfopitchintCount :: String -> ControlSignal
lfopitchintCount name = pStateF "lfopitchint" name (maybe 0 (+1))
lfopitchintCountTo :: String -> Signal Double -> Signal ValueMap
lfopitchintCountTo name ipat = innerJoin $ (\i -> pStateF "lfopitchint" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lfopitchintbus :: Signal Int -> Signal Double -> ControlSignal
lfopitchintbus busid pat = (pF "lfopitchint" pat) # (pI "^lfopitchint" busid)
lfopitchintrecv :: Signal Int -> ControlSignal
lfopitchintrecv busid = pI "^lfopitchint" busid

-- | 
lfoshape :: Signal Double -> ControlSignal
lfoshape = pF "lfoshape"
lfoshapeTake :: String -> [Double] -> ControlSignal
lfoshapeTake name xs = pStateListF "lfoshape" name xs
lfoshapeCount :: String -> ControlSignal
lfoshapeCount name = pStateF "lfoshape" name (maybe 0 (+1))
lfoshapeCountTo :: String -> Signal Double -> Signal ValueMap
lfoshapeCountTo name ipat = innerJoin $ (\i -> pStateF "lfoshape" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lfoshapebus :: Signal Int -> Signal Double -> ControlSignal
lfoshapebus busid pat = (pF "lfoshape" pat) # (pI "^lfoshape" busid)
lfoshaperecv :: Signal Int -> ControlSignal
lfoshaperecv busid = pI "^lfoshape" busid

-- | 
lfosync :: Signal Double -> ControlSignal
lfosync = pF "lfosync"
lfosyncTake :: String -> [Double] -> ControlSignal
lfosyncTake name xs = pStateListF "lfosync" name xs
lfosyncCount :: String -> ControlSignal
lfosyncCount name = pStateF "lfosync" name (maybe 0 (+1))
lfosyncCountTo :: String -> Signal Double -> Signal ValueMap
lfosyncCountTo name ipat = innerJoin $ (\i -> pStateF "lfosync" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lfosyncbus :: Signal Int -> Signal Double -> ControlSignal
lfosyncbus busid pat = (pF "lfosync" pat) # (pI "^lfosync" busid)
lfosyncrecv :: Signal Int -> ControlSignal
lfosyncrecv busid = pI "^lfosync" busid

-- | 
lhitom :: Signal Double -> ControlSignal
lhitom = pF "lhitom"
lhitomTake :: String -> [Double] -> ControlSignal
lhitomTake name xs = pStateListF "lhitom" name xs
lhitomCount :: String -> ControlSignal
lhitomCount name = pStateF "lhitom" name (maybe 0 (+1))
lhitomCountTo :: String -> Signal Double -> Signal ValueMap
lhitomCountTo name ipat = innerJoin $ (\i -> pStateF "lhitom" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lhitombus :: Signal Int -> Signal Double -> ControlSignal
lhitombus busid pat = (pF "lhitom" pat) # (pI "^lhitom" busid)
lhitomrecv :: Signal Int -> ControlSignal
lhitomrecv busid = pI "^lhitom" busid

-- | 
lkick :: Signal Double -> ControlSignal
lkick = pF "lkick"
lkickTake :: String -> [Double] -> ControlSignal
lkickTake name xs = pStateListF "lkick" name xs
lkickCount :: String -> ControlSignal
lkickCount name = pStateF "lkick" name (maybe 0 (+1))
lkickCountTo :: String -> Signal Double -> Signal ValueMap
lkickCountTo name ipat = innerJoin $ (\i -> pStateF "lkick" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lkickbus :: Signal Int -> Signal Double -> ControlSignal
lkickbus busid pat = (pF "lkick" pat) # (pI "^lkick" busid)
lkickrecv :: Signal Int -> ControlSignal
lkickrecv busid = pI "^lkick" busid

-- | 
llotom :: Signal Double -> ControlSignal
llotom = pF "llotom"
llotomTake :: String -> [Double] -> ControlSignal
llotomTake name xs = pStateListF "llotom" name xs
llotomCount :: String -> ControlSignal
llotomCount name = pStateF "llotom" name (maybe 0 (+1))
llotomCountTo :: String -> Signal Double -> Signal ValueMap
llotomCountTo name ipat = innerJoin $ (\i -> pStateF "llotom" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

llotombus :: Signal Int -> Signal Double -> ControlSignal
llotombus busid pat = (pF "llotom" pat) # (pI "^llotom" busid)
llotomrecv :: Signal Int -> ControlSignal
llotomrecv busid = pI "^llotom" busid

-- | A pattern of numbers. Specifies whether delaytime is calculated relative to cps. When set to 1, delaytime is a direct multiple of a cycle.
lock :: Signal Double -> ControlSignal
lock = pF "lock"
lockTake :: String -> [Double] -> ControlSignal
lockTake name xs = pStateListF "lock" name xs
lockCount :: String -> ControlSignal
lockCount name = pStateF "lock" name (maybe 0 (+1))
lockCountTo :: String -> Signal Double -> Signal ValueMap
lockCountTo name ipat = innerJoin $ (\i -> pStateF "lock" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lockbus :: Signal Int -> Signal Double -> ControlSignal
lockbus busid pat = (pF "lock" pat) # (pI "^lock" busid)
lockrecv :: Signal Int -> ControlSignal
lockrecv busid = pI "^lock" busid

-- | loops the sample (from `begin` to `end`) the specified number of times.
loop :: Signal Double -> ControlSignal
loop = pF "loop"
loopTake :: String -> [Double] -> ControlSignal
loopTake name xs = pStateListF "loop" name xs
loopCount :: String -> ControlSignal
loopCount name = pStateF "loop" name (maybe 0 (+1))
loopCountTo :: String -> Signal Double -> Signal ValueMap
loopCountTo name ipat = innerJoin $ (\i -> pStateF "loop" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

loopbus :: Signal Int -> Signal Double -> ControlSignal
loopbus _ _ = error $ "Control parameter 'loop' can't be sent to a bus."

-- | 
lophat :: Signal Double -> ControlSignal
lophat = pF "lophat"
lophatTake :: String -> [Double] -> ControlSignal
lophatTake name xs = pStateListF "lophat" name xs
lophatCount :: String -> ControlSignal
lophatCount name = pStateF "lophat" name (maybe 0 (+1))
lophatCountTo :: String -> Signal Double -> Signal ValueMap
lophatCountTo name ipat = innerJoin $ (\i -> pStateF "lophat" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lophatbus :: Signal Int -> Signal Double -> ControlSignal
lophatbus busid pat = (pF "lophat" pat) # (pI "^lophat" busid)
lophatrecv :: Signal Int -> ControlSignal
lophatrecv busid = pI "^lophat" busid

-- | 
lrate :: Signal Double -> ControlSignal
lrate = pF "lrate"
lrateTake :: String -> [Double] -> ControlSignal
lrateTake name xs = pStateListF "lrate" name xs
lrateCount :: String -> ControlSignal
lrateCount name = pStateF "lrate" name (maybe 0 (+1))
lrateCountTo :: String -> Signal Double -> Signal ValueMap
lrateCountTo name ipat = innerJoin $ (\i -> pStateF "lrate" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lratebus :: Signal Int -> Signal Double -> ControlSignal
lratebus busid pat = (pF "lrate" pat) # (pI "^lrate" busid)
lraterecv :: Signal Int -> ControlSignal
lraterecv busid = pI "^lrate" busid

-- | 
lsize :: Signal Double -> ControlSignal
lsize = pF "lsize"
lsizeTake :: String -> [Double] -> ControlSignal
lsizeTake name xs = pStateListF "lsize" name xs
lsizeCount :: String -> ControlSignal
lsizeCount name = pStateF "lsize" name (maybe 0 (+1))
lsizeCountTo :: String -> Signal Double -> Signal ValueMap
lsizeCountTo name ipat = innerJoin $ (\i -> pStateF "lsize" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lsizebus :: Signal Int -> Signal Double -> ControlSignal
lsizebus busid pat = (pF "lsize" pat) # (pI "^lsize" busid)
lsizerecv :: Signal Int -> ControlSignal
lsizerecv busid = pI "^lsize" busid

-- | 
lsnare :: Signal Double -> ControlSignal
lsnare = pF "lsnare"
lsnareTake :: String -> [Double] -> ControlSignal
lsnareTake name xs = pStateListF "lsnare" name xs
lsnareCount :: String -> ControlSignal
lsnareCount name = pStateF "lsnare" name (maybe 0 (+1))
lsnareCountTo :: String -> Signal Double -> Signal ValueMap
lsnareCountTo name ipat = innerJoin $ (\i -> pStateF "lsnare" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

lsnarebus :: Signal Int -> Signal Double -> ControlSignal
lsnarebus busid pat = (pF "lsnare" pat) # (pI "^lsnare" busid)
lsnarerecv :: Signal Int -> ControlSignal
lsnarerecv busid = pI "^lsnare" busid

-- | 
midibend :: Signal Double -> ControlSignal
midibend = pF "midibend"
midibendTake :: String -> [Double] -> ControlSignal
midibendTake name xs = pStateListF "midibend" name xs
midibendCount :: String -> ControlSignal
midibendCount name = pStateF "midibend" name (maybe 0 (+1))
midibendCountTo :: String -> Signal Double -> Signal ValueMap
midibendCountTo name ipat = innerJoin $ (\i -> pStateF "midibend" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

midibendbus :: Signal Int -> Signal Double -> ControlSignal
midibendbus _ _ = error $ "Control parameter 'midibend' can't be sent to a bus."

-- | 
midichan :: Signal Double -> ControlSignal
midichan = pF "midichan"
midichanTake :: String -> [Double] -> ControlSignal
midichanTake name xs = pStateListF "midichan" name xs
midichanCount :: String -> ControlSignal
midichanCount name = pStateF "midichan" name (maybe 0 (+1))
midichanCountTo :: String -> Signal Double -> Signal ValueMap
midichanCountTo name ipat = innerJoin $ (\i -> pStateF "midichan" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

midichanbus :: Signal Int -> Signal Double -> ControlSignal
midichanbus _ _ = error $ "Control parameter 'midichan' can't be sent to a bus."

-- | 
midicmd :: Signal String -> ControlSignal
midicmd = pS "midicmd"
midicmdTake :: String -> [Double] -> ControlSignal
midicmdTake name xs = pStateListF "midicmd" name xs
midicmdbus :: Signal Int -> Signal String -> ControlSignal
midicmdbus _ _ = error $ "Control parameter 'midicmd' can't be sent to a bus."

-- | 
miditouch :: Signal Double -> ControlSignal
miditouch = pF "miditouch"
miditouchTake :: String -> [Double] -> ControlSignal
miditouchTake name xs = pStateListF "miditouch" name xs
miditouchCount :: String -> ControlSignal
miditouchCount name = pStateF "miditouch" name (maybe 0 (+1))
miditouchCountTo :: String -> Signal Double -> Signal ValueMap
miditouchCountTo name ipat = innerJoin $ (\i -> pStateF "miditouch" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

miditouchbus :: Signal Int -> Signal Double -> ControlSignal
miditouchbus _ _ = error $ "Control parameter 'miditouch' can't be sent to a bus."

-- | 
minutes :: Signal Double -> ControlSignal
minutes = pF "minutes"
minutesTake :: String -> [Double] -> ControlSignal
minutesTake name xs = pStateListF "minutes" name xs
minutesCount :: String -> ControlSignal
minutesCount name = pStateF "minutes" name (maybe 0 (+1))
minutesCountTo :: String -> Signal Double -> Signal ValueMap
minutesCountTo name ipat = innerJoin $ (\i -> pStateF "minutes" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

minutesbus :: Signal Int -> Signal Double -> ControlSignal
minutesbus _ _ = error $ "Control parameter 'minutes' can't be sent to a bus."

-- | 
modwheel :: Signal Double -> ControlSignal
modwheel = pF "modwheel"
modwheelTake :: String -> [Double] -> ControlSignal
modwheelTake name xs = pStateListF "modwheel" name xs
modwheelCount :: String -> ControlSignal
modwheelCount name = pStateF "modwheel" name (maybe 0 (+1))
modwheelCountTo :: String -> Signal Double -> Signal ValueMap
modwheelCountTo name ipat = innerJoin $ (\i -> pStateF "modwheel" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

modwheelbus :: Signal Int -> Signal Double -> ControlSignal
modwheelbus busid pat = (pF "modwheel" pat) # (pI "^modwheel" busid)
modwheelrecv :: Signal Int -> ControlSignal
modwheelrecv busid = pI "^modwheel" busid

-- | 
mtranspose :: Signal Double -> ControlSignal
mtranspose = pF "mtranspose"
mtransposeTake :: String -> [Double] -> ControlSignal
mtransposeTake name xs = pStateListF "mtranspose" name xs
mtransposeCount :: String -> ControlSignal
mtransposeCount name = pStateF "mtranspose" name (maybe 0 (+1))
mtransposeCountTo :: String -> Signal Double -> Signal ValueMap
mtransposeCountTo name ipat = innerJoin $ (\i -> pStateF "mtranspose" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

mtransposebus :: Signal Int -> Signal Double -> ControlSignal
mtransposebus busid pat = (pF "mtranspose" pat) # (pI "^mtranspose" busid)
mtransposerecv :: Signal Int -> ControlSignal
mtransposerecv busid = pI "^mtranspose" busid

-- | The note or sample number to choose for a synth or sampleset
n :: Signal Note -> ControlSignal
n = pN "n"
nTake :: String -> [Double] -> ControlSignal
nTake name xs = pStateListF "n" name xs
nCount :: String -> ControlSignal
nCount name = pStateF "n" name (maybe 0 (+1))
nCountTo :: String -> Signal Double -> Signal ValueMap
nCountTo name ipat = innerJoin $ (\i -> pStateF "n" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

nbus :: Signal Int -> Signal Note -> ControlSignal
nbus _ _ = error $ "Control parameter 'n' can't be sent to a bus."

-- | The note or pitch to play a sound or synth with
note :: Signal Note -> ControlSignal
note = pN "note"
noteTake :: String -> [Double] -> ControlSignal
noteTake name xs = pStateListF "note" name xs
noteCount :: String -> ControlSignal
noteCount name = pStateF "note" name (maybe 0 (+1))
noteCountTo :: String -> Signal Double -> Signal ValueMap
noteCountTo name ipat = innerJoin $ (\i -> pStateF "note" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

notebus :: Signal Int -> Signal Note -> ControlSignal
notebus _ _ = error $ "Control parameter 'note' can't be sent to a bus."

-- | Nudges events into the future by the specified number of seconds. Negative numbers work up to a point as well (due to internal latency)
nudge :: Signal Double -> ControlSignal
nudge = pF "nudge"
nudgeTake :: String -> [Double] -> ControlSignal
nudgeTake name xs = pStateListF "nudge" name xs
nudgeCount :: String -> ControlSignal
nudgeCount name = pStateF "nudge" name (maybe 0 (+1))
nudgeCountTo :: String -> Signal Double -> Signal ValueMap
nudgeCountTo name ipat = innerJoin $ (\i -> pStateF "nudge" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

nudgebus :: Signal Int -> Signal Double -> ControlSignal
nudgebus busid pat = (pF "nudge" pat) # (pI "^nudge" busid)
nudgerecv :: Signal Int -> ControlSignal
nudgerecv busid = pI "^nudge" busid

-- | 
octave :: Signal Int -> ControlSignal
octave = pI "octave"
octaveTake :: String -> [Double] -> ControlSignal
octaveTake name xs = pStateListF "octave" name xs
octaveCount :: String -> ControlSignal
octaveCount name = pStateF "octave" name (maybe 0 (+1))
octaveCountTo :: String -> Signal Double -> Signal ValueMap
octaveCountTo name ipat = innerJoin $ (\i -> pStateF "octave" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

octavebus :: Signal Int -> Signal Int -> ControlSignal
octavebus _ _ = error $ "Control parameter 'octave' can't be sent to a bus."

-- | 
octaveR :: Signal Double -> ControlSignal
octaveR = pF "octaveR"
octaveRTake :: String -> [Double] -> ControlSignal
octaveRTake name xs = pStateListF "octaveR" name xs
octaveRCount :: String -> ControlSignal
octaveRCount name = pStateF "octaveR" name (maybe 0 (+1))
octaveRCountTo :: String -> Signal Double -> Signal ValueMap
octaveRCountTo name ipat = innerJoin $ (\i -> pStateF "octaveR" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

octaveRbus :: Signal Int -> Signal Double -> ControlSignal
octaveRbus busid pat = (pF "octaveR" pat) # (pI "^octaveR" busid)
octaveRrecv :: Signal Int -> ControlSignal
octaveRrecv busid = pI "^octaveR" busid

-- | octaver effect
octer :: Signal Double -> ControlSignal
octer = pF "octer"
octerTake :: String -> [Double] -> ControlSignal
octerTake name xs = pStateListF "octer" name xs
octerCount :: String -> ControlSignal
octerCount name = pStateF "octer" name (maybe 0 (+1))
octerCountTo :: String -> Signal Double -> Signal ValueMap
octerCountTo name ipat = innerJoin $ (\i -> pStateF "octer" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

octerbus :: Signal Int -> Signal Double -> ControlSignal
octerbus busid pat = (pF "octer" pat) # (pI "^octer" busid)
octerrecv :: Signal Int -> ControlSignal
octerrecv busid = pI "^octer" busid

-- | octaver effect
octersub :: Signal Double -> ControlSignal
octersub = pF "octersub"
octersubTake :: String -> [Double] -> ControlSignal
octersubTake name xs = pStateListF "octersub" name xs
octersubCount :: String -> ControlSignal
octersubCount name = pStateF "octersub" name (maybe 0 (+1))
octersubCountTo :: String -> Signal Double -> Signal ValueMap
octersubCountTo name ipat = innerJoin $ (\i -> pStateF "octersub" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

octersubbus :: Signal Int -> Signal Double -> ControlSignal
octersubbus busid pat = (pF "octersub" pat) # (pI "^octersub" busid)
octersubrecv :: Signal Int -> ControlSignal
octersubrecv busid = pI "^octersub" busid

-- | octaver effect
octersubsub :: Signal Double -> ControlSignal
octersubsub = pF "octersubsub"
octersubsubTake :: String -> [Double] -> ControlSignal
octersubsubTake name xs = pStateListF "octersubsub" name xs
octersubsubCount :: String -> ControlSignal
octersubsubCount name = pStateF "octersubsub" name (maybe 0 (+1))
octersubsubCountTo :: String -> Signal Double -> Signal ValueMap
octersubsubCountTo name ipat = innerJoin $ (\i -> pStateF "octersubsub" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

octersubsubbus :: Signal Int -> Signal Double -> ControlSignal
octersubsubbus busid pat = (pF "octersubsub" pat) # (pI "^octersubsub" busid)
octersubsubrecv :: Signal Int -> ControlSignal
octersubsubrecv busid = pI "^octersubsub" busid

-- | 
offset :: Signal Double -> ControlSignal
offset = pF "offset"
offsetTake :: String -> [Double] -> ControlSignal
offsetTake name xs = pStateListF "offset" name xs
offsetCount :: String -> ControlSignal
offsetCount name = pStateF "offset" name (maybe 0 (+1))
offsetCountTo :: String -> Signal Double -> Signal ValueMap
offsetCountTo name ipat = innerJoin $ (\i -> pStateF "offset" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

offsetbus :: Signal Int -> Signal Double -> ControlSignal
offsetbus _ _ = error $ "Control parameter 'offset' can't be sent to a bus."

-- | 
ophatdecay :: Signal Double -> ControlSignal
ophatdecay = pF "ophatdecay"
ophatdecayTake :: String -> [Double] -> ControlSignal
ophatdecayTake name xs = pStateListF "ophatdecay" name xs
ophatdecayCount :: String -> ControlSignal
ophatdecayCount name = pStateF "ophatdecay" name (maybe 0 (+1))
ophatdecayCountTo :: String -> Signal Double -> Signal ValueMap
ophatdecayCountTo name ipat = innerJoin $ (\i -> pStateF "ophatdecay" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

ophatdecaybus :: Signal Int -> Signal Double -> ControlSignal
ophatdecaybus busid pat = (pF "ophatdecay" pat) # (pI "^ophatdecay" busid)
ophatdecayrecv :: Signal Int -> ControlSignal
ophatdecayrecv busid = pI "^ophatdecay" busid

-- | a pattern of numbers. An `orbit` is a global parameter context for patterns. Patterns with the same orbit will share hardware output bus offset and global effects, e.g. reverb and delay. The maximum number of orbits is specified in the superdirt startup, numbers higher than maximum will wrap around.
orbit :: Signal Int -> ControlSignal
orbit = pI "orbit"
orbitTake :: String -> [Double] -> ControlSignal
orbitTake name xs = pStateListF "orbit" name xs
orbitCount :: String -> ControlSignal
orbitCount name = pStateF "orbit" name (maybe 0 (+1))
orbitCountTo :: String -> Signal Double -> Signal ValueMap
orbitCountTo name ipat = innerJoin $ (\i -> pStateF "orbit" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

orbitbus :: Signal Int -> Signal Int -> ControlSignal
orbitbus busid pat = (pI "orbit" pat) # (pI "^orbit" busid)
orbitrecv :: Signal Int -> ControlSignal
orbitrecv busid = pI "^orbit" busid

-- | 
overgain :: Signal Double -> ControlSignal
overgain = pF "overgain"
overgainTake :: String -> [Double] -> ControlSignal
overgainTake name xs = pStateListF "overgain" name xs
overgainCount :: String -> ControlSignal
overgainCount name = pStateF "overgain" name (maybe 0 (+1))
overgainCountTo :: String -> Signal Double -> Signal ValueMap
overgainCountTo name ipat = innerJoin $ (\i -> pStateF "overgain" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

overgainbus :: Signal Int -> Signal Double -> ControlSignal
overgainbus _ _ = error $ "Control parameter 'overgain' can't be sent to a bus."

-- | 
overshape :: Signal Double -> ControlSignal
overshape = pF "overshape"
overshapeTake :: String -> [Double] -> ControlSignal
overshapeTake name xs = pStateListF "overshape" name xs
overshapeCount :: String -> ControlSignal
overshapeCount name = pStateF "overshape" name (maybe 0 (+1))
overshapeCountTo :: String -> Signal Double -> Signal ValueMap
overshapeCountTo name ipat = innerJoin $ (\i -> pStateF "overshape" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

overshapebus :: Signal Int -> Signal Double -> ControlSignal
overshapebus busid pat = (pF "overshape" pat) # (pI "^overshape" busid)
overshaperecv :: Signal Int -> ControlSignal
overshaperecv busid = pI "^overshape" busid

-- | a pattern of numbers between 0 and 1, from left to right (assuming stereo), once round a circle (assuming multichannel)
pan :: Signal Double -> ControlSignal
pan = pF "pan"
panTake :: String -> [Double] -> ControlSignal
panTake name xs = pStateListF "pan" name xs
panCount :: String -> ControlSignal
panCount name = pStateF "pan" name (maybe 0 (+1))
panCountTo :: String -> Signal Double -> Signal ValueMap
panCountTo name ipat = innerJoin $ (\i -> pStateF "pan" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

panbus :: Signal Int -> Signal Double -> ControlSignal
panbus busid pat = (pF "pan" pat) # (pI "^pan" busid)
panrecv :: Signal Int -> ControlSignal
panrecv busid = pI "^pan" busid

-- | a pattern of numbers between -1.0 and 1.0, which controls the relative position of the centre pan in a pair of adjacent speakers (multichannel only)
panorient :: Signal Double -> ControlSignal
panorient = pF "panorient"
panorientTake :: String -> [Double] -> ControlSignal
panorientTake name xs = pStateListF "panorient" name xs
panorientCount :: String -> ControlSignal
panorientCount name = pStateF "panorient" name (maybe 0 (+1))
panorientCountTo :: String -> Signal Double -> Signal ValueMap
panorientCountTo name ipat = innerJoin $ (\i -> pStateF "panorient" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

panorientbus :: Signal Int -> Signal Double -> ControlSignal
panorientbus busid pat = (pF "panorient" pat) # (pI "^panorient" busid)
panorientrecv :: Signal Int -> ControlSignal
panorientrecv busid = pI "^panorient" busid

-- | a pattern of numbers between -inf and inf, which controls how much multichannel output is fanned out (negative is backwards ordering)
panspan :: Signal Double -> ControlSignal
panspan = pF "panspan"
panspanTake :: String -> [Double] -> ControlSignal
panspanTake name xs = pStateListF "panspan" name xs
panspanCount :: String -> ControlSignal
panspanCount name = pStateF "panspan" name (maybe 0 (+1))
panspanCountTo :: String -> Signal Double -> Signal ValueMap
panspanCountTo name ipat = innerJoin $ (\i -> pStateF "panspan" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

panspanbus :: Signal Int -> Signal Double -> ControlSignal
panspanbus busid pat = (pF "panspan" pat) # (pI "^panspan" busid)
panspanrecv :: Signal Int -> ControlSignal
panspanrecv busid = pI "^panspan" busid

-- | a pattern of numbers between 0.0 and 1.0, which controls the multichannel spread range (multichannel only)
pansplay :: Signal Double -> ControlSignal
pansplay = pF "pansplay"
pansplayTake :: String -> [Double] -> ControlSignal
pansplayTake name xs = pStateListF "pansplay" name xs
pansplayCount :: String -> ControlSignal
pansplayCount name = pStateF "pansplay" name (maybe 0 (+1))
pansplayCountTo :: String -> Signal Double -> Signal ValueMap
pansplayCountTo name ipat = innerJoin $ (\i -> pStateF "pansplay" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

pansplaybus :: Signal Int -> Signal Double -> ControlSignal
pansplaybus busid pat = (pF "pansplay" pat) # (pI "^pansplay" busid)
pansplayrecv :: Signal Int -> ControlSignal
pansplayrecv busid = pI "^pansplay" busid

-- | a pattern of numbers between 0.0 and inf, which controls how much each channel is distributed over neighbours (multichannel only)
panwidth :: Signal Double -> ControlSignal
panwidth = pF "panwidth"
panwidthTake :: String -> [Double] -> ControlSignal
panwidthTake name xs = pStateListF "panwidth" name xs
panwidthCount :: String -> ControlSignal
panwidthCount name = pStateF "panwidth" name (maybe 0 (+1))
panwidthCountTo :: String -> Signal Double -> Signal ValueMap
panwidthCountTo name ipat = innerJoin $ (\i -> pStateF "panwidth" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

panwidthbus :: Signal Int -> Signal Double -> ControlSignal
panwidthbus busid pat = (pF "panwidth" pat) # (pI "^panwidth" busid)
panwidthrecv :: Signal Int -> ControlSignal
panwidthrecv busid = pI "^panwidth" busid

-- | 
partials :: Signal Double -> ControlSignal
partials = pF "partials"
partialsTake :: String -> [Double] -> ControlSignal
partialsTake name xs = pStateListF "partials" name xs
partialsCount :: String -> ControlSignal
partialsCount name = pStateF "partials" name (maybe 0 (+1))
partialsCountTo :: String -> Signal Double -> Signal ValueMap
partialsCountTo name ipat = innerJoin $ (\i -> pStateF "partials" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

partialsbus :: Signal Int -> Signal Double -> ControlSignal
partialsbus busid pat = (pF "partials" pat) # (pI "^partials" busid)
partialsrecv :: Signal Int -> ControlSignal
partialsrecv busid = pI "^partials" busid

-- | Phaser Audio DSP effect | params are 'phaserrate' and 'phaserdepth'
phaserdepth :: Signal Double -> ControlSignal
phaserdepth = pF "phaserdepth"
phaserdepthTake :: String -> [Double] -> ControlSignal
phaserdepthTake name xs = pStateListF "phaserdepth" name xs
phaserdepthCount :: String -> ControlSignal
phaserdepthCount name = pStateF "phaserdepth" name (maybe 0 (+1))
phaserdepthCountTo :: String -> Signal Double -> Signal ValueMap
phaserdepthCountTo name ipat = innerJoin $ (\i -> pStateF "phaserdepth" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

phaserdepthbus :: Signal Int -> Signal Double -> ControlSignal
phaserdepthbus busid pat = (pF "phaserdepth" pat) # (pI "^phaserdepth" busid)
phaserdepthrecv :: Signal Int -> ControlSignal
phaserdepthrecv busid = pI "^phaserdepth" busid

-- | Phaser Audio DSP effect | params are 'phaserrate' and 'phaserdepth'
phaserrate :: Signal Double -> ControlSignal
phaserrate = pF "phaserrate"
phaserrateTake :: String -> [Double] -> ControlSignal
phaserrateTake name xs = pStateListF "phaserrate" name xs
phaserrateCount :: String -> ControlSignal
phaserrateCount name = pStateF "phaserrate" name (maybe 0 (+1))
phaserrateCountTo :: String -> Signal Double -> Signal ValueMap
phaserrateCountTo name ipat = innerJoin $ (\i -> pStateF "phaserrate" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

phaserratebus :: Signal Int -> Signal Double -> ControlSignal
phaserratebus busid pat = (pF "phaserrate" pat) # (pI "^phaserrate" busid)
phaserraterecv :: Signal Int -> ControlSignal
phaserraterecv busid = pI "^phaserrate" busid

-- | 
pitch1 :: Signal Double -> ControlSignal
pitch1 = pF "pitch1"
pitch1Take :: String -> [Double] -> ControlSignal
pitch1Take name xs = pStateListF "pitch1" name xs
pitch1Count :: String -> ControlSignal
pitch1Count name = pStateF "pitch1" name (maybe 0 (+1))
pitch1CountTo :: String -> Signal Double -> Signal ValueMap
pitch1CountTo name ipat = innerJoin $ (\i -> pStateF "pitch1" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

pitch1bus :: Signal Int -> Signal Double -> ControlSignal
pitch1bus busid pat = (pF "pitch1" pat) # (pI "^pitch1" busid)
pitch1recv :: Signal Int -> ControlSignal
pitch1recv busid = pI "^pitch1" busid

-- | 
pitch2 :: Signal Double -> ControlSignal
pitch2 = pF "pitch2"
pitch2Take :: String -> [Double] -> ControlSignal
pitch2Take name xs = pStateListF "pitch2" name xs
pitch2Count :: String -> ControlSignal
pitch2Count name = pStateF "pitch2" name (maybe 0 (+1))
pitch2CountTo :: String -> Signal Double -> Signal ValueMap
pitch2CountTo name ipat = innerJoin $ (\i -> pStateF "pitch2" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

pitch2bus :: Signal Int -> Signal Double -> ControlSignal
pitch2bus busid pat = (pF "pitch2" pat) # (pI "^pitch2" busid)
pitch2recv :: Signal Int -> ControlSignal
pitch2recv busid = pI "^pitch2" busid

-- | 
pitch3 :: Signal Double -> ControlSignal
pitch3 = pF "pitch3"
pitch3Take :: String -> [Double] -> ControlSignal
pitch3Take name xs = pStateListF "pitch3" name xs
pitch3Count :: String -> ControlSignal
pitch3Count name = pStateF "pitch3" name (maybe 0 (+1))
pitch3CountTo :: String -> Signal Double -> Signal ValueMap
pitch3CountTo name ipat = innerJoin $ (\i -> pStateF "pitch3" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

pitch3bus :: Signal Int -> Signal Double -> ControlSignal
pitch3bus busid pat = (pF "pitch3" pat) # (pI "^pitch3" busid)
pitch3recv :: Signal Int -> ControlSignal
pitch3recv busid = pI "^pitch3" busid

-- | 
polyTouch :: Signal Double -> ControlSignal
polyTouch = pF "polyTouch"
polyTouchTake :: String -> [Double] -> ControlSignal
polyTouchTake name xs = pStateListF "polyTouch" name xs
polyTouchCount :: String -> ControlSignal
polyTouchCount name = pStateF "polyTouch" name (maybe 0 (+1))
polyTouchCountTo :: String -> Signal Double -> Signal ValueMap
polyTouchCountTo name ipat = innerJoin $ (\i -> pStateF "polyTouch" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

polyTouchbus :: Signal Int -> Signal Double -> ControlSignal
polyTouchbus _ _ = error $ "Control parameter 'polyTouch' can't be sent to a bus."

-- | 
portamento :: Signal Double -> ControlSignal
portamento = pF "portamento"
portamentoTake :: String -> [Double] -> ControlSignal
portamentoTake name xs = pStateListF "portamento" name xs
portamentoCount :: String -> ControlSignal
portamentoCount name = pStateF "portamento" name (maybe 0 (+1))
portamentoCountTo :: String -> Signal Double -> Signal ValueMap
portamentoCountTo name ipat = innerJoin $ (\i -> pStateF "portamento" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

portamentobus :: Signal Int -> Signal Double -> ControlSignal
portamentobus busid pat = (pF "portamento" pat) # (pI "^portamento" busid)
portamentorecv :: Signal Int -> ControlSignal
portamentorecv busid = pI "^portamento" busid

-- | 
progNum :: Signal Double -> ControlSignal
progNum = pF "progNum"
progNumTake :: String -> [Double] -> ControlSignal
progNumTake name xs = pStateListF "progNum" name xs
progNumCount :: String -> ControlSignal
progNumCount name = pStateF "progNum" name (maybe 0 (+1))
progNumCountTo :: String -> Signal Double -> Signal ValueMap
progNumCountTo name ipat = innerJoin $ (\i -> pStateF "progNum" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

progNumbus :: Signal Int -> Signal Double -> ControlSignal
progNumbus _ _ = error $ "Control parameter 'progNum' can't be sent to a bus."

-- | used in SuperDirt softsynths as a control rate or 'speed'
rate :: Signal Double -> ControlSignal
rate = pF "rate"
rateTake :: String -> [Double] -> ControlSignal
rateTake name xs = pStateListF "rate" name xs
rateCount :: String -> ControlSignal
rateCount name = pStateF "rate" name (maybe 0 (+1))
rateCountTo :: String -> Signal Double -> Signal ValueMap
rateCountTo name ipat = innerJoin $ (\i -> pStateF "rate" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

ratebus :: Signal Int -> Signal Double -> ControlSignal
ratebus busid pat = (pF "rate" pat) # (pI "^rate" busid)
raterecv :: Signal Int -> ControlSignal
raterecv busid = pI "^rate" busid

-- | Spectral conform
real :: Signal Double -> ControlSignal
real = pF "real"
realTake :: String -> [Double] -> ControlSignal
realTake name xs = pStateListF "real" name xs
realCount :: String -> ControlSignal
realCount name = pStateF "real" name (maybe 0 (+1))
realCountTo :: String -> Signal Double -> Signal ValueMap
realCountTo name ipat = innerJoin $ (\i -> pStateF "real" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

realbus :: Signal Int -> Signal Double -> ControlSignal
realbus busid pat = (pF "real" pat) # (pI "^real" busid)
realrecv :: Signal Int -> ControlSignal
realrecv busid = pI "^real" busid

-- | a pattern of numbers to specify the release time (in seconds) of an envelope applied to each sample.
release :: Signal Double -> ControlSignal
release = pF "release"
releaseTake :: String -> [Double] -> ControlSignal
releaseTake name xs = pStateListF "release" name xs
releaseCount :: String -> ControlSignal
releaseCount name = pStateF "release" name (maybe 0 (+1))
releaseCountTo :: String -> Signal Double -> Signal ValueMap
releaseCountTo name ipat = innerJoin $ (\i -> pStateF "release" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

releasebus :: Signal Int -> Signal Double -> ControlSignal
releasebus busid pat = (pF "release" pat) # (pI "^release" busid)
releaserecv :: Signal Int -> ControlSignal
releaserecv busid = pI "^release" busid

-- | a pattern of numbers from 0 to 1. Specifies the resonance of the low-pass filter.
resonance :: Signal Double -> ControlSignal
resonance = pF "resonance"
resonanceTake :: String -> [Double] -> ControlSignal
resonanceTake name xs = pStateListF "resonance" name xs
resonanceCount :: String -> ControlSignal
resonanceCount name = pStateF "resonance" name (maybe 0 (+1))
resonanceCountTo :: String -> Signal Double -> Signal ValueMap
resonanceCountTo name ipat = innerJoin $ (\i -> pStateF "resonance" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

resonancebus :: Signal Int -> Signal Double -> ControlSignal
resonancebus busid pat = (pF "resonance" pat) # (pI "^resonance" busid)
resonancerecv :: Signal Int -> ControlSignal
resonancerecv busid = pI "^resonance" busid

-- | ring modulation
ring :: Signal Double -> ControlSignal
ring = pF "ring"
ringTake :: String -> [Double] -> ControlSignal
ringTake name xs = pStateListF "ring" name xs
ringCount :: String -> ControlSignal
ringCount name = pStateF "ring" name (maybe 0 (+1))
ringCountTo :: String -> Signal Double -> Signal ValueMap
ringCountTo name ipat = innerJoin $ (\i -> pStateF "ring" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

ringbus :: Signal Int -> Signal Double -> ControlSignal
ringbus busid pat = (pF "ring" pat) # (pI "^ring" busid)
ringrecv :: Signal Int -> ControlSignal
ringrecv busid = pI "^ring" busid

-- | ring modulation
ringdf :: Signal Double -> ControlSignal
ringdf = pF "ringdf"
ringdfTake :: String -> [Double] -> ControlSignal
ringdfTake name xs = pStateListF "ringdf" name xs
ringdfCount :: String -> ControlSignal
ringdfCount name = pStateF "ringdf" name (maybe 0 (+1))
ringdfCountTo :: String -> Signal Double -> Signal ValueMap
ringdfCountTo name ipat = innerJoin $ (\i -> pStateF "ringdf" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

ringdfbus :: Signal Int -> Signal Double -> ControlSignal
ringdfbus busid pat = (pF "ringdf" pat) # (pI "^ringdf" busid)
ringdfrecv :: Signal Int -> ControlSignal
ringdfrecv busid = pI "^ringdf" busid

-- | ring modulation
ringf :: Signal Double -> ControlSignal
ringf = pF "ringf"
ringfTake :: String -> [Double] -> ControlSignal
ringfTake name xs = pStateListF "ringf" name xs
ringfCount :: String -> ControlSignal
ringfCount name = pStateF "ringf" name (maybe 0 (+1))
ringfCountTo :: String -> Signal Double -> Signal ValueMap
ringfCountTo name ipat = innerJoin $ (\i -> pStateF "ringf" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

ringfbus :: Signal Int -> Signal Double -> ControlSignal
ringfbus busid pat = (pF "ringf" pat) # (pI "^ringf" busid)
ringfrecv :: Signal Int -> ControlSignal
ringfrecv busid = pI "^ringf" busid

-- | a pattern of numbers from 0 to 1. Sets the level of reverb.
room :: Signal Double -> ControlSignal
room = pF "room"
roomTake :: String -> [Double] -> ControlSignal
roomTake name xs = pStateListF "room" name xs
roomCount :: String -> ControlSignal
roomCount name = pStateF "room" name (maybe 0 (+1))
roomCountTo :: String -> Signal Double -> Signal ValueMap
roomCountTo name ipat = innerJoin $ (\i -> pStateF "room" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

roombus :: Signal Int -> Signal Double -> ControlSignal
roombus busid pat = (pF "room" pat) # (pI "^room" busid)
roomrecv :: Signal Int -> ControlSignal
roomrecv busid = pI "^room" busid

-- | 
sagogo :: Signal Double -> ControlSignal
sagogo = pF "sagogo"
sagogoTake :: String -> [Double] -> ControlSignal
sagogoTake name xs = pStateListF "sagogo" name xs
sagogoCount :: String -> ControlSignal
sagogoCount name = pStateF "sagogo" name (maybe 0 (+1))
sagogoCountTo :: String -> Signal Double -> Signal ValueMap
sagogoCountTo name ipat = innerJoin $ (\i -> pStateF "sagogo" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

sagogobus :: Signal Int -> Signal Double -> ControlSignal
sagogobus busid pat = (pF "sagogo" pat) # (pI "^sagogo" busid)
sagogorecv :: Signal Int -> ControlSignal
sagogorecv busid = pI "^sagogo" busid

-- | 
sclap :: Signal Double -> ControlSignal
sclap = pF "sclap"
sclapTake :: String -> [Double] -> ControlSignal
sclapTake name xs = pStateListF "sclap" name xs
sclapCount :: String -> ControlSignal
sclapCount name = pStateF "sclap" name (maybe 0 (+1))
sclapCountTo :: String -> Signal Double -> Signal ValueMap
sclapCountTo name ipat = innerJoin $ (\i -> pStateF "sclap" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

sclapbus :: Signal Int -> Signal Double -> ControlSignal
sclapbus busid pat = (pF "sclap" pat) # (pI "^sclap" busid)
sclaprecv :: Signal Int -> ControlSignal
sclaprecv busid = pI "^sclap" busid

-- | 
sclaves :: Signal Double -> ControlSignal
sclaves = pF "sclaves"
sclavesTake :: String -> [Double] -> ControlSignal
sclavesTake name xs = pStateListF "sclaves" name xs
sclavesCount :: String -> ControlSignal
sclavesCount name = pStateF "sclaves" name (maybe 0 (+1))
sclavesCountTo :: String -> Signal Double -> Signal ValueMap
sclavesCountTo name ipat = innerJoin $ (\i -> pStateF "sclaves" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

sclavesbus :: Signal Int -> Signal Double -> ControlSignal
sclavesbus busid pat = (pF "sclaves" pat) # (pI "^sclaves" busid)
sclavesrecv :: Signal Int -> ControlSignal
sclavesrecv busid = pI "^sclaves" busid

-- | Spectral scramble
scram :: Signal Double -> ControlSignal
scram = pF "scram"
scramTake :: String -> [Double] -> ControlSignal
scramTake name xs = pStateListF "scram" name xs
scramCount :: String -> ControlSignal
scramCount name = pStateF "scram" name (maybe 0 (+1))
scramCountTo :: String -> Signal Double -> Signal ValueMap
scramCountTo name ipat = innerJoin $ (\i -> pStateF "scram" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

scrambus :: Signal Int -> Signal Double -> ControlSignal
scrambus busid pat = (pF "scram" pat) # (pI "^scram" busid)
scramrecv :: Signal Int -> ControlSignal
scramrecv busid = pI "^scram" busid

-- | 
scrash :: Signal Double -> ControlSignal
scrash = pF "scrash"
scrashTake :: String -> [Double] -> ControlSignal
scrashTake name xs = pStateListF "scrash" name xs
scrashCount :: String -> ControlSignal
scrashCount name = pStateF "scrash" name (maybe 0 (+1))
scrashCountTo :: String -> Signal Double -> Signal ValueMap
scrashCountTo name ipat = innerJoin $ (\i -> pStateF "scrash" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

scrashbus :: Signal Int -> Signal Double -> ControlSignal
scrashbus busid pat = (pF "scrash" pat) # (pI "^scrash" busid)
scrashrecv :: Signal Int -> ControlSignal
scrashrecv busid = pI "^scrash" busid

-- | 
seconds :: Signal Double -> ControlSignal
seconds = pF "seconds"
secondsTake :: String -> [Double] -> ControlSignal
secondsTake name xs = pStateListF "seconds" name xs
secondsCount :: String -> ControlSignal
secondsCount name = pStateF "seconds" name (maybe 0 (+1))
secondsCountTo :: String -> Signal Double -> Signal ValueMap
secondsCountTo name ipat = innerJoin $ (\i -> pStateF "seconds" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

secondsbus :: Signal Int -> Signal Double -> ControlSignal
secondsbus _ _ = error $ "Control parameter 'seconds' can't be sent to a bus."

-- | 
semitone :: Signal Double -> ControlSignal
semitone = pF "semitone"
semitoneTake :: String -> [Double] -> ControlSignal
semitoneTake name xs = pStateListF "semitone" name xs
semitoneCount :: String -> ControlSignal
semitoneCount name = pStateF "semitone" name (maybe 0 (+1))
semitoneCountTo :: String -> Signal Double -> Signal ValueMap
semitoneCountTo name ipat = innerJoin $ (\i -> pStateF "semitone" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

semitonebus :: Signal Int -> Signal Double -> ControlSignal
semitonebus busid pat = (pF "semitone" pat) # (pI "^semitone" busid)
semitonerecv :: Signal Int -> ControlSignal
semitonerecv busid = pI "^semitone" busid

-- | wave shaping distortion, a pattern of numbers from 0 for no distortion up to 1 for loads of distortion.
shape :: Signal Double -> ControlSignal
shape = pF "shape"
shapeTake :: String -> [Double] -> ControlSignal
shapeTake name xs = pStateListF "shape" name xs
shapeCount :: String -> ControlSignal
shapeCount name = pStateF "shape" name (maybe 0 (+1))
shapeCountTo :: String -> Signal Double -> Signal ValueMap
shapeCountTo name ipat = innerJoin $ (\i -> pStateF "shape" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

shapebus :: Signal Int -> Signal Double -> ControlSignal
shapebus busid pat = (pF "shape" pat) # (pI "^shape" busid)
shaperecv :: Signal Int -> ControlSignal
shaperecv busid = pI "^shape" busid

-- | a pattern of numbers from 0 to 1. Sets the perceptual size (reverb time) of the `room` to be used in reverb.
size :: Signal Double -> ControlSignal
size = pF "size"
sizeTake :: String -> [Double] -> ControlSignal
sizeTake name xs = pStateListF "size" name xs
sizeCount :: String -> ControlSignal
sizeCount name = pStateF "size" name (maybe 0 (+1))
sizeCountTo :: String -> Signal Double -> Signal ValueMap
sizeCountTo name ipat = innerJoin $ (\i -> pStateF "size" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

sizebus :: Signal Int -> Signal Double -> ControlSignal
sizebus busid pat = (pF "size" pat) # (pI "^size" busid)
sizerecv :: Signal Int -> ControlSignal
sizerecv busid = pI "^size" busid

-- | 
slide :: Signal Double -> ControlSignal
slide = pF "slide"
slideTake :: String -> [Double] -> ControlSignal
slideTake name xs = pStateListF "slide" name xs
slideCount :: String -> ControlSignal
slideCount name = pStateF "slide" name (maybe 0 (+1))
slideCountTo :: String -> Signal Double -> Signal ValueMap
slideCountTo name ipat = innerJoin $ (\i -> pStateF "slide" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

slidebus :: Signal Int -> Signal Double -> ControlSignal
slidebus busid pat = (pF "slide" pat) # (pI "^slide" busid)
sliderecv :: Signal Int -> ControlSignal
sliderecv busid = pI "^slide" busid

-- | 
slider0 :: Signal Double -> ControlSignal
slider0 = pF "slider0"
slider0Take :: String -> [Double] -> ControlSignal
slider0Take name xs = pStateListF "slider0" name xs
slider0Count :: String -> ControlSignal
slider0Count name = pStateF "slider0" name (maybe 0 (+1))
slider0CountTo :: String -> Signal Double -> Signal ValueMap
slider0CountTo name ipat = innerJoin $ (\i -> pStateF "slider0" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

slider0bus :: Signal Int -> Signal Double -> ControlSignal
slider0bus busid pat = (pF "slider0" pat) # (pI "^slider0" busid)
slider0recv :: Signal Int -> ControlSignal
slider0recv busid = pI "^slider0" busid

-- | 
slider1 :: Signal Double -> ControlSignal
slider1 = pF "slider1"
slider1Take :: String -> [Double] -> ControlSignal
slider1Take name xs = pStateListF "slider1" name xs
slider1Count :: String -> ControlSignal
slider1Count name = pStateF "slider1" name (maybe 0 (+1))
slider1CountTo :: String -> Signal Double -> Signal ValueMap
slider1CountTo name ipat = innerJoin $ (\i -> pStateF "slider1" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

slider1bus :: Signal Int -> Signal Double -> ControlSignal
slider1bus busid pat = (pF "slider1" pat) # (pI "^slider1" busid)
slider1recv :: Signal Int -> ControlSignal
slider1recv busid = pI "^slider1" busid

-- | 
slider10 :: Signal Double -> ControlSignal
slider10 = pF "slider10"
slider10Take :: String -> [Double] -> ControlSignal
slider10Take name xs = pStateListF "slider10" name xs
slider10Count :: String -> ControlSignal
slider10Count name = pStateF "slider10" name (maybe 0 (+1))
slider10CountTo :: String -> Signal Double -> Signal ValueMap
slider10CountTo name ipat = innerJoin $ (\i -> pStateF "slider10" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

slider10bus :: Signal Int -> Signal Double -> ControlSignal
slider10bus busid pat = (pF "slider10" pat) # (pI "^slider10" busid)
slider10recv :: Signal Int -> ControlSignal
slider10recv busid = pI "^slider10" busid

-- | 
slider11 :: Signal Double -> ControlSignal
slider11 = pF "slider11"
slider11Take :: String -> [Double] -> ControlSignal
slider11Take name xs = pStateListF "slider11" name xs
slider11Count :: String -> ControlSignal
slider11Count name = pStateF "slider11" name (maybe 0 (+1))
slider11CountTo :: String -> Signal Double -> Signal ValueMap
slider11CountTo name ipat = innerJoin $ (\i -> pStateF "slider11" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

slider11bus :: Signal Int -> Signal Double -> ControlSignal
slider11bus busid pat = (pF "slider11" pat) # (pI "^slider11" busid)
slider11recv :: Signal Int -> ControlSignal
slider11recv busid = pI "^slider11" busid

-- | 
slider12 :: Signal Double -> ControlSignal
slider12 = pF "slider12"
slider12Take :: String -> [Double] -> ControlSignal
slider12Take name xs = pStateListF "slider12" name xs
slider12Count :: String -> ControlSignal
slider12Count name = pStateF "slider12" name (maybe 0 (+1))
slider12CountTo :: String -> Signal Double -> Signal ValueMap
slider12CountTo name ipat = innerJoin $ (\i -> pStateF "slider12" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

slider12bus :: Signal Int -> Signal Double -> ControlSignal
slider12bus busid pat = (pF "slider12" pat) # (pI "^slider12" busid)
slider12recv :: Signal Int -> ControlSignal
slider12recv busid = pI "^slider12" busid

-- | 
slider13 :: Signal Double -> ControlSignal
slider13 = pF "slider13"
slider13Take :: String -> [Double] -> ControlSignal
slider13Take name xs = pStateListF "slider13" name xs
slider13Count :: String -> ControlSignal
slider13Count name = pStateF "slider13" name (maybe 0 (+1))
slider13CountTo :: String -> Signal Double -> Signal ValueMap
slider13CountTo name ipat = innerJoin $ (\i -> pStateF "slider13" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

slider13bus :: Signal Int -> Signal Double -> ControlSignal
slider13bus busid pat = (pF "slider13" pat) # (pI "^slider13" busid)
slider13recv :: Signal Int -> ControlSignal
slider13recv busid = pI "^slider13" busid

-- | 
slider14 :: Signal Double -> ControlSignal
slider14 = pF "slider14"
slider14Take :: String -> [Double] -> ControlSignal
slider14Take name xs = pStateListF "slider14" name xs
slider14Count :: String -> ControlSignal
slider14Count name = pStateF "slider14" name (maybe 0 (+1))
slider14CountTo :: String -> Signal Double -> Signal ValueMap
slider14CountTo name ipat = innerJoin $ (\i -> pStateF "slider14" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

slider14bus :: Signal Int -> Signal Double -> ControlSignal
slider14bus busid pat = (pF "slider14" pat) # (pI "^slider14" busid)
slider14recv :: Signal Int -> ControlSignal
slider14recv busid = pI "^slider14" busid

-- | 
slider15 :: Signal Double -> ControlSignal
slider15 = pF "slider15"
slider15Take :: String -> [Double] -> ControlSignal
slider15Take name xs = pStateListF "slider15" name xs
slider15Count :: String -> ControlSignal
slider15Count name = pStateF "slider15" name (maybe 0 (+1))
slider15CountTo :: String -> Signal Double -> Signal ValueMap
slider15CountTo name ipat = innerJoin $ (\i -> pStateF "slider15" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

slider15bus :: Signal Int -> Signal Double -> ControlSignal
slider15bus busid pat = (pF "slider15" pat) # (pI "^slider15" busid)
slider15recv :: Signal Int -> ControlSignal
slider15recv busid = pI "^slider15" busid

-- | 
slider2 :: Signal Double -> ControlSignal
slider2 = pF "slider2"
slider2Take :: String -> [Double] -> ControlSignal
slider2Take name xs = pStateListF "slider2" name xs
slider2Count :: String -> ControlSignal
slider2Count name = pStateF "slider2" name (maybe 0 (+1))
slider2CountTo :: String -> Signal Double -> Signal ValueMap
slider2CountTo name ipat = innerJoin $ (\i -> pStateF "slider2" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

slider2bus :: Signal Int -> Signal Double -> ControlSignal
slider2bus busid pat = (pF "slider2" pat) # (pI "^slider2" busid)
slider2recv :: Signal Int -> ControlSignal
slider2recv busid = pI "^slider2" busid

-- | 
slider3 :: Signal Double -> ControlSignal
slider3 = pF "slider3"
slider3Take :: String -> [Double] -> ControlSignal
slider3Take name xs = pStateListF "slider3" name xs
slider3Count :: String -> ControlSignal
slider3Count name = pStateF "slider3" name (maybe 0 (+1))
slider3CountTo :: String -> Signal Double -> Signal ValueMap
slider3CountTo name ipat = innerJoin $ (\i -> pStateF "slider3" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

slider3bus :: Signal Int -> Signal Double -> ControlSignal
slider3bus busid pat = (pF "slider3" pat) # (pI "^slider3" busid)
slider3recv :: Signal Int -> ControlSignal
slider3recv busid = pI "^slider3" busid

-- | 
slider4 :: Signal Double -> ControlSignal
slider4 = pF "slider4"
slider4Take :: String -> [Double] -> ControlSignal
slider4Take name xs = pStateListF "slider4" name xs
slider4Count :: String -> ControlSignal
slider4Count name = pStateF "slider4" name (maybe 0 (+1))
slider4CountTo :: String -> Signal Double -> Signal ValueMap
slider4CountTo name ipat = innerJoin $ (\i -> pStateF "slider4" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

slider4bus :: Signal Int -> Signal Double -> ControlSignal
slider4bus busid pat = (pF "slider4" pat) # (pI "^slider4" busid)
slider4recv :: Signal Int -> ControlSignal
slider4recv busid = pI "^slider4" busid

-- | 
slider5 :: Signal Double -> ControlSignal
slider5 = pF "slider5"
slider5Take :: String -> [Double] -> ControlSignal
slider5Take name xs = pStateListF "slider5" name xs
slider5Count :: String -> ControlSignal
slider5Count name = pStateF "slider5" name (maybe 0 (+1))
slider5CountTo :: String -> Signal Double -> Signal ValueMap
slider5CountTo name ipat = innerJoin $ (\i -> pStateF "slider5" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

slider5bus :: Signal Int -> Signal Double -> ControlSignal
slider5bus busid pat = (pF "slider5" pat) # (pI "^slider5" busid)
slider5recv :: Signal Int -> ControlSignal
slider5recv busid = pI "^slider5" busid

-- | 
slider6 :: Signal Double -> ControlSignal
slider6 = pF "slider6"
slider6Take :: String -> [Double] -> ControlSignal
slider6Take name xs = pStateListF "slider6" name xs
slider6Count :: String -> ControlSignal
slider6Count name = pStateF "slider6" name (maybe 0 (+1))
slider6CountTo :: String -> Signal Double -> Signal ValueMap
slider6CountTo name ipat = innerJoin $ (\i -> pStateF "slider6" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

slider6bus :: Signal Int -> Signal Double -> ControlSignal
slider6bus busid pat = (pF "slider6" pat) # (pI "^slider6" busid)
slider6recv :: Signal Int -> ControlSignal
slider6recv busid = pI "^slider6" busid

-- | 
slider7 :: Signal Double -> ControlSignal
slider7 = pF "slider7"
slider7Take :: String -> [Double] -> ControlSignal
slider7Take name xs = pStateListF "slider7" name xs
slider7Count :: String -> ControlSignal
slider7Count name = pStateF "slider7" name (maybe 0 (+1))
slider7CountTo :: String -> Signal Double -> Signal ValueMap
slider7CountTo name ipat = innerJoin $ (\i -> pStateF "slider7" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

slider7bus :: Signal Int -> Signal Double -> ControlSignal
slider7bus busid pat = (pF "slider7" pat) # (pI "^slider7" busid)
slider7recv :: Signal Int -> ControlSignal
slider7recv busid = pI "^slider7" busid

-- | 
slider8 :: Signal Double -> ControlSignal
slider8 = pF "slider8"
slider8Take :: String -> [Double] -> ControlSignal
slider8Take name xs = pStateListF "slider8" name xs
slider8Count :: String -> ControlSignal
slider8Count name = pStateF "slider8" name (maybe 0 (+1))
slider8CountTo :: String -> Signal Double -> Signal ValueMap
slider8CountTo name ipat = innerJoin $ (\i -> pStateF "slider8" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

slider8bus :: Signal Int -> Signal Double -> ControlSignal
slider8bus busid pat = (pF "slider8" pat) # (pI "^slider8" busid)
slider8recv :: Signal Int -> ControlSignal
slider8recv busid = pI "^slider8" busid

-- | 
slider9 :: Signal Double -> ControlSignal
slider9 = pF "slider9"
slider9Take :: String -> [Double] -> ControlSignal
slider9Take name xs = pStateListF "slider9" name xs
slider9Count :: String -> ControlSignal
slider9Count name = pStateF "slider9" name (maybe 0 (+1))
slider9CountTo :: String -> Signal Double -> Signal ValueMap
slider9CountTo name ipat = innerJoin $ (\i -> pStateF "slider9" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

slider9bus :: Signal Int -> Signal Double -> ControlSignal
slider9bus busid pat = (pF "slider9" pat) # (pI "^slider9" busid)
slider9recv :: Signal Int -> ControlSignal
slider9recv busid = pI "^slider9" busid

-- | Spectral smear
smear :: Signal Double -> ControlSignal
smear = pF "smear"
smearTake :: String -> [Double] -> ControlSignal
smearTake name xs = pStateListF "smear" name xs
smearCount :: String -> ControlSignal
smearCount name = pStateF "smear" name (maybe 0 (+1))
smearCountTo :: String -> Signal Double -> Signal ValueMap
smearCountTo name ipat = innerJoin $ (\i -> pStateF "smear" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

smearbus :: Signal Int -> Signal Double -> ControlSignal
smearbus busid pat = (pF "smear" pat) # (pI "^smear" busid)
smearrecv :: Signal Int -> ControlSignal
smearrecv busid = pI "^smear" busid

-- | 
songPtr :: Signal Double -> ControlSignal
songPtr = pF "songPtr"
songPtrTake :: String -> [Double] -> ControlSignal
songPtrTake name xs = pStateListF "songPtr" name xs
songPtrCount :: String -> ControlSignal
songPtrCount name = pStateF "songPtr" name (maybe 0 (+1))
songPtrCountTo :: String -> Signal Double -> Signal ValueMap
songPtrCountTo name ipat = innerJoin $ (\i -> pStateF "songPtr" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

songPtrbus :: Signal Int -> Signal Double -> ControlSignal
songPtrbus _ _ = error $ "Control parameter 'songPtr' can't be sent to a bus."

-- | a pattern of numbers which changes the speed of sample playback, i.e. a cheap way of changing pitch. Negative values will play the sample backwards!
speed :: Signal Double -> ControlSignal
speed = pF "speed"
speedTake :: String -> [Double] -> ControlSignal
speedTake name xs = pStateListF "speed" name xs
speedCount :: String -> ControlSignal
speedCount name = pStateF "speed" name (maybe 0 (+1))
speedCountTo :: String -> Signal Double -> Signal ValueMap
speedCountTo name ipat = innerJoin $ (\i -> pStateF "speed" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

speedbus :: Signal Int -> Signal Double -> ControlSignal
speedbus _ _ = error $ "Control parameter 'speed' can't be sent to a bus."

-- | 
squiz :: Signal Double -> ControlSignal
squiz = pF "squiz"
squizTake :: String -> [Double] -> ControlSignal
squizTake name xs = pStateListF "squiz" name xs
squizCount :: String -> ControlSignal
squizCount name = pStateF "squiz" name (maybe 0 (+1))
squizCountTo :: String -> Signal Double -> Signal ValueMap
squizCountTo name ipat = innerJoin $ (\i -> pStateF "squiz" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

squizbus :: Signal Int -> Signal Double -> ControlSignal
squizbus busid pat = (pF "squiz" pat) # (pI "^squiz" busid)
squizrecv :: Signal Int -> ControlSignal
squizrecv busid = pI "^squiz" busid

-- | 
stepsPerOctave :: Signal Double -> ControlSignal
stepsPerOctave = pF "stepsPerOctave"
stepsPerOctaveTake :: String -> [Double] -> ControlSignal
stepsPerOctaveTake name xs = pStateListF "stepsPerOctave" name xs
stepsPerOctaveCount :: String -> ControlSignal
stepsPerOctaveCount name = pStateF "stepsPerOctave" name (maybe 0 (+1))
stepsPerOctaveCountTo :: String -> Signal Double -> Signal ValueMap
stepsPerOctaveCountTo name ipat = innerJoin $ (\i -> pStateF "stepsPerOctave" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

stepsPerOctavebus :: Signal Int -> Signal Double -> ControlSignal
stepsPerOctavebus busid pat = (pF "stepsPerOctave" pat) # (pI "^stepsPerOctave" busid)
stepsPerOctaverecv :: Signal Int -> ControlSignal
stepsPerOctaverecv busid = pI "^stepsPerOctave" busid

-- | 
stutterdepth :: Signal Double -> ControlSignal
stutterdepth = pF "stutterdepth"
stutterdepthTake :: String -> [Double] -> ControlSignal
stutterdepthTake name xs = pStateListF "stutterdepth" name xs
stutterdepthCount :: String -> ControlSignal
stutterdepthCount name = pStateF "stutterdepth" name (maybe 0 (+1))
stutterdepthCountTo :: String -> Signal Double -> Signal ValueMap
stutterdepthCountTo name ipat = innerJoin $ (\i -> pStateF "stutterdepth" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

stutterdepthbus :: Signal Int -> Signal Double -> ControlSignal
stutterdepthbus busid pat = (pF "stutterdepth" pat) # (pI "^stutterdepth" busid)
stutterdepthrecv :: Signal Int -> ControlSignal
stutterdepthrecv busid = pI "^stutterdepth" busid

-- | 
stuttertime :: Signal Double -> ControlSignal
stuttertime = pF "stuttertime"
stuttertimeTake :: String -> [Double] -> ControlSignal
stuttertimeTake name xs = pStateListF "stuttertime" name xs
stuttertimeCount :: String -> ControlSignal
stuttertimeCount name = pStateF "stuttertime" name (maybe 0 (+1))
stuttertimeCountTo :: String -> Signal Double -> Signal ValueMap
stuttertimeCountTo name ipat = innerJoin $ (\i -> pStateF "stuttertime" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

stuttertimebus :: Signal Int -> Signal Double -> ControlSignal
stuttertimebus busid pat = (pF "stuttertime" pat) # (pI "^stuttertime" busid)
stuttertimerecv :: Signal Int -> ControlSignal
stuttertimerecv busid = pI "^stuttertime" busid

-- | 
sustain :: Signal Double -> ControlSignal
sustain = pF "sustain"
sustainTake :: String -> [Double] -> ControlSignal
sustainTake name xs = pStateListF "sustain" name xs
sustainCount :: String -> ControlSignal
sustainCount name = pStateF "sustain" name (maybe 0 (+1))
sustainCountTo :: String -> Signal Double -> Signal ValueMap
sustainCountTo name ipat = innerJoin $ (\i -> pStateF "sustain" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

sustainbus :: Signal Int -> Signal Double -> ControlSignal
sustainbus _ _ = error $ "Control parameter 'sustain' can't be sent to a bus."

-- | 
sustainpedal :: Signal Double -> ControlSignal
sustainpedal = pF "sustainpedal"
sustainpedalTake :: String -> [Double] -> ControlSignal
sustainpedalTake name xs = pStateListF "sustainpedal" name xs
sustainpedalCount :: String -> ControlSignal
sustainpedalCount name = pStateF "sustainpedal" name (maybe 0 (+1))
sustainpedalCountTo :: String -> Signal Double -> Signal ValueMap
sustainpedalCountTo name ipat = innerJoin $ (\i -> pStateF "sustainpedal" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

sustainpedalbus :: Signal Int -> Signal Double -> ControlSignal
sustainpedalbus busid pat = (pF "sustainpedal" pat) # (pI "^sustainpedal" busid)
sustainpedalrecv :: Signal Int -> ControlSignal
sustainpedalrecv busid = pI "^sustainpedal" busid

-- | time stretch amount
timescale :: Signal Double -> ControlSignal
timescale = pF "timescale"
timescaleTake :: String -> [Double] -> ControlSignal
timescaleTake name xs = pStateListF "timescale" name xs
timescaleCount :: String -> ControlSignal
timescaleCount name = pStateF "timescale" name (maybe 0 (+1))
timescaleCountTo :: String -> Signal Double -> Signal ValueMap
timescaleCountTo name ipat = innerJoin $ (\i -> pStateF "timescale" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

timescalebus :: Signal Int -> Signal Double -> ControlSignal
timescalebus _ _ = error $ "Control parameter 'timescale' can't be sent to a bus."

-- | time stretch window size
timescalewin :: Signal Double -> ControlSignal
timescalewin = pF "timescalewin"
timescalewinTake :: String -> [Double] -> ControlSignal
timescalewinTake name xs = pStateListF "timescalewin" name xs
timescalewinCount :: String -> ControlSignal
timescalewinCount name = pStateF "timescalewin" name (maybe 0 (+1))
timescalewinCountTo :: String -> Signal Double -> Signal ValueMap
timescalewinCountTo name ipat = innerJoin $ (\i -> pStateF "timescalewin" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

timescalewinbus :: Signal Int -> Signal Double -> ControlSignal
timescalewinbus _ _ = error $ "Control parameter 'timescalewin' can't be sent to a bus."

-- | for internal sound routing
to :: Signal Double -> ControlSignal
to = pF "to"
toTake :: String -> [Double] -> ControlSignal
toTake name xs = pStateListF "to" name xs
toCount :: String -> ControlSignal
toCount name = pStateF "to" name (maybe 0 (+1))
toCountTo :: String -> Signal Double -> Signal ValueMap
toCountTo name ipat = innerJoin $ (\i -> pStateF "to" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

tobus :: Signal Int -> Signal Double -> ControlSignal
tobus busid pat = (pF "to" pat) # (pI "^to" busid)
torecv :: Signal Int -> ControlSignal
torecv busid = pI "^to" busid

-- | for internal sound routing
toArg :: Signal String -> ControlSignal
toArg = pS "toArg"
toArgTake :: String -> [Double] -> ControlSignal
toArgTake name xs = pStateListF "toArg" name xs
toArgbus :: Signal Int -> Signal String -> ControlSignal
toArgbus busid pat = (pS "toArg" pat) # (pI "^toArg" busid)
toArgrecv :: Signal Int -> ControlSignal
toArgrecv busid = pI "^toArg" busid

-- | 
tomdecay :: Signal Double -> ControlSignal
tomdecay = pF "tomdecay"
tomdecayTake :: String -> [Double] -> ControlSignal
tomdecayTake name xs = pStateListF "tomdecay" name xs
tomdecayCount :: String -> ControlSignal
tomdecayCount name = pStateF "tomdecay" name (maybe 0 (+1))
tomdecayCountTo :: String -> Signal Double -> Signal ValueMap
tomdecayCountTo name ipat = innerJoin $ (\i -> pStateF "tomdecay" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

tomdecaybus :: Signal Int -> Signal Double -> ControlSignal
tomdecaybus busid pat = (pF "tomdecay" pat) # (pI "^tomdecay" busid)
tomdecayrecv :: Signal Int -> ControlSignal
tomdecayrecv busid = pI "^tomdecay" busid

-- | Tremolo Audio DSP effect | params are 'tremolorate' and 'tremolodepth'
tremolodepth :: Signal Double -> ControlSignal
tremolodepth = pF "tremolodepth"
tremolodepthTake :: String -> [Double] -> ControlSignal
tremolodepthTake name xs = pStateListF "tremolodepth" name xs
tremolodepthCount :: String -> ControlSignal
tremolodepthCount name = pStateF "tremolodepth" name (maybe 0 (+1))
tremolodepthCountTo :: String -> Signal Double -> Signal ValueMap
tremolodepthCountTo name ipat = innerJoin $ (\i -> pStateF "tremolodepth" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

tremolodepthbus :: Signal Int -> Signal Double -> ControlSignal
tremolodepthbus busid pat = (pF "tremolodepth" pat) # (pI "^tremolodepth" busid)
tremolodepthrecv :: Signal Int -> ControlSignal
tremolodepthrecv busid = pI "^tremolodepth" busid

-- | Tremolo Audio DSP effect | params are 'tremolorate' and 'tremolodepth'
tremolorate :: Signal Double -> ControlSignal
tremolorate = pF "tremolorate"
tremolorateTake :: String -> [Double] -> ControlSignal
tremolorateTake name xs = pStateListF "tremolorate" name xs
tremolorateCount :: String -> ControlSignal
tremolorateCount name = pStateF "tremolorate" name (maybe 0 (+1))
tremolorateCountTo :: String -> Signal Double -> Signal ValueMap
tremolorateCountTo name ipat = innerJoin $ (\i -> pStateF "tremolorate" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

tremoloratebus :: Signal Int -> Signal Double -> ControlSignal
tremoloratebus busid pat = (pF "tremolorate" pat) # (pI "^tremolorate" busid)
tremoloraterecv :: Signal Int -> ControlSignal
tremoloraterecv busid = pI "^tremolorate" busid

-- | tube distortion
triode :: Signal Double -> ControlSignal
triode = pF "triode"
triodeTake :: String -> [Double] -> ControlSignal
triodeTake name xs = pStateListF "triode" name xs
triodeCount :: String -> ControlSignal
triodeCount name = pStateF "triode" name (maybe 0 (+1))
triodeCountTo :: String -> Signal Double -> Signal ValueMap
triodeCountTo name ipat = innerJoin $ (\i -> pStateF "triode" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

triodebus :: Signal Int -> Signal Double -> ControlSignal
triodebus busid pat = (pF "triode" pat) # (pI "^triode" busid)
trioderecv :: Signal Int -> ControlSignal
trioderecv busid = pI "^triode" busid

-- | 
tsdelay :: Signal Double -> ControlSignal
tsdelay = pF "tsdelay"
tsdelayTake :: String -> [Double] -> ControlSignal
tsdelayTake name xs = pStateListF "tsdelay" name xs
tsdelayCount :: String -> ControlSignal
tsdelayCount name = pStateF "tsdelay" name (maybe 0 (+1))
tsdelayCountTo :: String -> Signal Double -> Signal ValueMap
tsdelayCountTo name ipat = innerJoin $ (\i -> pStateF "tsdelay" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

tsdelaybus :: Signal Int -> Signal Double -> ControlSignal
tsdelaybus busid pat = (pF "tsdelay" pat) # (pI "^tsdelay" busid)
tsdelayrecv :: Signal Int -> ControlSignal
tsdelayrecv busid = pI "^tsdelay" busid

-- | 
uid :: Signal Double -> ControlSignal
uid = pF "uid"
uidTake :: String -> [Double] -> ControlSignal
uidTake name xs = pStateListF "uid" name xs
uidCount :: String -> ControlSignal
uidCount name = pStateF "uid" name (maybe 0 (+1))
uidCountTo :: String -> Signal Double -> Signal ValueMap
uidCountTo name ipat = innerJoin $ (\i -> pStateF "uid" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

uidbus :: Signal Int -> Signal Double -> ControlSignal
uidbus _ _ = error $ "Control parameter 'uid' can't be sent to a bus."

-- | used in conjunction with `speed`, accepts values of "r" (rate, default behavior), "c" (cycles), or "s" (seconds). Using `unit "c"` means `speed` will be interpreted in units of cycles, e.g. `speed "1"` means samples will be stretched to fill a cycle. Using `unit "s"` means the playback speed will be adjusted so that the duration is the number of seconds specified by `speed`.
unit :: Signal String -> ControlSignal
unit = pS "unit"
unitTake :: String -> [Double] -> ControlSignal
unitTake name xs = pStateListF "unit" name xs
unitbus :: Signal Int -> Signal String -> ControlSignal
unitbus _ _ = error $ "Control parameter 'unit' can't be sent to a bus."

-- | 
val :: Signal Double -> ControlSignal
val = pF "val"
valTake :: String -> [Double] -> ControlSignal
valTake name xs = pStateListF "val" name xs
valCount :: String -> ControlSignal
valCount name = pStateF "val" name (maybe 0 (+1))
valCountTo :: String -> Signal Double -> Signal ValueMap
valCountTo name ipat = innerJoin $ (\i -> pStateF "val" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

valbus :: Signal Int -> Signal Double -> ControlSignal
valbus _ _ = error $ "Control parameter 'val' can't be sent to a bus."

-- | 
vcfegint :: Signal Double -> ControlSignal
vcfegint = pF "vcfegint"
vcfegintTake :: String -> [Double] -> ControlSignal
vcfegintTake name xs = pStateListF "vcfegint" name xs
vcfegintCount :: String -> ControlSignal
vcfegintCount name = pStateF "vcfegint" name (maybe 0 (+1))
vcfegintCountTo :: String -> Signal Double -> Signal ValueMap
vcfegintCountTo name ipat = innerJoin $ (\i -> pStateF "vcfegint" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

vcfegintbus :: Signal Int -> Signal Double -> ControlSignal
vcfegintbus busid pat = (pF "vcfegint" pat) # (pI "^vcfegint" busid)
vcfegintrecv :: Signal Int -> ControlSignal
vcfegintrecv busid = pI "^vcfegint" busid

-- | 
vcoegint :: Signal Double -> ControlSignal
vcoegint = pF "vcoegint"
vcoegintTake :: String -> [Double] -> ControlSignal
vcoegintTake name xs = pStateListF "vcoegint" name xs
vcoegintCount :: String -> ControlSignal
vcoegintCount name = pStateF "vcoegint" name (maybe 0 (+1))
vcoegintCountTo :: String -> Signal Double -> Signal ValueMap
vcoegintCountTo name ipat = innerJoin $ (\i -> pStateF "vcoegint" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

vcoegintbus :: Signal Int -> Signal Double -> ControlSignal
vcoegintbus busid pat = (pF "vcoegint" pat) # (pI "^vcoegint" busid)
vcoegintrecv :: Signal Int -> ControlSignal
vcoegintrecv busid = pI "^vcoegint" busid

-- | 
velocity :: Signal Double -> ControlSignal
velocity = pF "velocity"
velocityTake :: String -> [Double] -> ControlSignal
velocityTake name xs = pStateListF "velocity" name xs
velocityCount :: String -> ControlSignal
velocityCount name = pStateF "velocity" name (maybe 0 (+1))
velocityCountTo :: String -> Signal Double -> Signal ValueMap
velocityCountTo name ipat = innerJoin $ (\i -> pStateF "velocity" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

velocitybus :: Signal Int -> Signal Double -> ControlSignal
velocitybus busid pat = (pF "velocity" pat) # (pI "^velocity" busid)
velocityrecv :: Signal Int -> ControlSignal
velocityrecv busid = pI "^velocity" busid

-- | 
voice :: Signal Double -> ControlSignal
voice = pF "voice"
voiceTake :: String -> [Double] -> ControlSignal
voiceTake name xs = pStateListF "voice" name xs
voiceCount :: String -> ControlSignal
voiceCount name = pStateF "voice" name (maybe 0 (+1))
voiceCountTo :: String -> Signal Double -> Signal ValueMap
voiceCountTo name ipat = innerJoin $ (\i -> pStateF "voice" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

voicebus :: Signal Int -> Signal Double -> ControlSignal
voicebus busid pat = (pF "voice" pat) # (pI "^voice" busid)
voicerecv :: Signal Int -> ControlSignal
voicerecv busid = pI "^voice" busid

-- | formant filter to make things sound like vowels, a pattern of either `a`, `e`, `i`, `o` or `u`. Use a rest (`~`) for no effect.
vowel :: Signal String -> ControlSignal
vowel = pS "vowel"
vowelTake :: String -> [Double] -> ControlSignal
vowelTake name xs = pStateListF "vowel" name xs
vowelbus :: Signal Int -> Signal String -> ControlSignal
vowelbus busid pat = (pS "vowel" pat) # (pI "^vowel" busid)
vowelrecv :: Signal Int -> ControlSignal
vowelrecv busid = pI "^vowel" busid

-- | 
waveloss :: Signal Double -> ControlSignal
waveloss = pF "waveloss"
wavelossTake :: String -> [Double] -> ControlSignal
wavelossTake name xs = pStateListF "waveloss" name xs
wavelossCount :: String -> ControlSignal
wavelossCount name = pStateF "waveloss" name (maybe 0 (+1))
wavelossCountTo :: String -> Signal Double -> Signal ValueMap
wavelossCountTo name ipat = innerJoin $ (\i -> pStateF "waveloss" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

wavelossbus :: Signal Int -> Signal Double -> ControlSignal
wavelossbus busid pat = (pF "waveloss" pat) # (pI "^waveloss" busid)
wavelossrecv :: Signal Int -> ControlSignal
wavelossrecv busid = pI "^waveloss" busid

-- | 
xsdelay :: Signal Double -> ControlSignal
xsdelay = pF "xsdelay"
xsdelayTake :: String -> [Double] -> ControlSignal
xsdelayTake name xs = pStateListF "xsdelay" name xs
xsdelayCount :: String -> ControlSignal
xsdelayCount name = pStateF "xsdelay" name (maybe 0 (+1))
xsdelayCountTo :: String -> Signal Double -> Signal ValueMap
xsdelayCountTo name ipat = innerJoin $ (\i -> pStateF "xsdelay" name (maybe 0 ((`mod'` i) . (+1)))) <$> ipat

xsdelaybus :: Signal Int -> Signal Double -> ControlSignal
xsdelaybus busid pat = (pF "xsdelay" pat) # (pI "^xsdelay" busid)
xsdelayrecv :: Signal Int -> ControlSignal
xsdelayrecv busid = pI "^xsdelay" busid



-- aliases

voi :: Signal Double -> ControlSignal
voi = voice
voibus :: Signal Int -> Signal Double -> ControlSignal
voibus = voicebus
voirecv :: Signal Int -> ControlSignal
voirecv = voicerecv

vco :: Signal Double -> ControlSignal
vco = vcoegint
vcobus :: Signal Int -> Signal Double -> ControlSignal
vcobus = vcoegintbus
vcorecv :: Signal Int -> ControlSignal
vcorecv = vcoegintrecv

vcf :: Signal Double -> ControlSignal
vcf = vcfegint
vcfbus :: Signal Int -> Signal Double -> ControlSignal
vcfbus = vcfegintbus
vcfrecv :: Signal Int -> ControlSignal
vcfrecv = vcfegintrecv

up :: Signal Note -> ControlSignal
up = note

tremr :: Signal Double -> ControlSignal
tremr = tremolorate
tremrbus :: Signal Int -> Signal Double -> ControlSignal
tremrbus = tremoloratebus
tremrrecv :: Signal Int -> ControlSignal
tremrrecv = tremoloraterecv

tremdp :: Signal Double -> ControlSignal
tremdp = tremolodepth
tremdpbus :: Signal Int -> Signal Double -> ControlSignal
tremdpbus = tremolodepthbus
tremdprecv :: Signal Int -> ControlSignal
tremdprecv = tremolodepthrecv

tdecay :: Signal Double -> ControlSignal
tdecay = tomdecay
tdecaybus :: Signal Int -> Signal Double -> ControlSignal
tdecaybus = tomdecaybus
tdecayrecv :: Signal Int -> ControlSignal
tdecayrecv = tomdecayrecv

sz :: Signal Double -> ControlSignal
sz = size
szbus :: Signal Int -> Signal Double -> ControlSignal
szbus = sizebus
szrecv :: Signal Int -> ControlSignal
szrecv = sizerecv

sus :: Signal Double -> ControlSignal
sus = sustain

stt :: Signal Double -> ControlSignal
stt = stuttertime
sttbus :: Signal Int -> Signal Double -> ControlSignal
sttbus = stuttertimebus
sttrecv :: Signal Int -> ControlSignal
sttrecv = stuttertimerecv

std :: Signal Double -> ControlSignal
std = stutterdepth
stdbus :: Signal Int -> Signal Double -> ControlSignal
stdbus = stutterdepthbus
stdrecv :: Signal Int -> ControlSignal
stdrecv = stutterdepthrecv

sld :: Signal Double -> ControlSignal
sld = slide
sldbus :: Signal Int -> Signal Double -> ControlSignal
sldbus = slidebus
sldrecv :: Signal Int -> ControlSignal
sldrecv = sliderecv

scr :: Signal Double -> ControlSignal
scr = scrash
scrbus :: Signal Int -> Signal Double -> ControlSignal
scrbus = scrashbus
scrrecv :: Signal Int -> ControlSignal
scrrecv = scrashrecv

scp :: Signal Double -> ControlSignal
scp = sclap
scpbus :: Signal Int -> Signal Double -> ControlSignal
scpbus = sclapbus
scprecv :: Signal Int -> ControlSignal
scprecv = sclaprecv

scl :: Signal Double -> ControlSignal
scl = sclaves
sclbus :: Signal Int -> Signal Double -> ControlSignal
sclbus = sclavesbus
sclrecv :: Signal Int -> ControlSignal
sclrecv = sclavesrecv

sag :: Signal Double -> ControlSignal
sag = sagogo
sagbus :: Signal Int -> Signal Double -> ControlSignal
sagbus = sagogobus
sagrecv :: Signal Int -> ControlSignal
sagrecv = sagogorecv

s :: Signal String -> ControlSignal
s = sound

rel :: Signal Double -> ControlSignal
rel = release
relbus :: Signal Int -> Signal Double -> ControlSignal
relbus = releasebus
relrecv :: Signal Int -> ControlSignal
relrecv = releaserecv

por :: Signal Double -> ControlSignal
por = portamento
porbus :: Signal Int -> Signal Double -> ControlSignal
porbus = portamentobus
porrecv :: Signal Int -> ControlSignal
porrecv = portamentorecv

pit3 :: Signal Double -> ControlSignal
pit3 = pitch3
pit3bus :: Signal Int -> Signal Double -> ControlSignal
pit3bus = pitch3bus
pit3recv :: Signal Int -> ControlSignal
pit3recv = pitch3recv

pit2 :: Signal Double -> ControlSignal
pit2 = pitch2
pit2bus :: Signal Int -> Signal Double -> ControlSignal
pit2bus = pitch2bus
pit2recv :: Signal Int -> ControlSignal
pit2recv = pitch2recv

pit1 :: Signal Double -> ControlSignal
pit1 = pitch1
pit1bus :: Signal Int -> Signal Double -> ControlSignal
pit1bus = pitch1bus
pit1recv :: Signal Int -> ControlSignal
pit1recv = pitch1recv

phasr :: Signal Double -> ControlSignal
phasr = phaserrate
phasrbus :: Signal Int -> Signal Double -> ControlSignal
phasrbus = phaserratebus
phasrrecv :: Signal Int -> ControlSignal
phasrrecv = phaserraterecv

phasdp :: Signal Double -> ControlSignal
phasdp = phaserdepth
phasdpbus :: Signal Int -> Signal Double -> ControlSignal
phasdpbus = phaserdepthbus
phasdprecv :: Signal Int -> ControlSignal
phasdprecv = phaserdepthrecv

ohdecay :: Signal Double -> ControlSignal
ohdecay = ophatdecay
ohdecaybus :: Signal Int -> Signal Double -> ControlSignal
ohdecaybus = ophatdecaybus
ohdecayrecv :: Signal Int -> ControlSignal
ohdecayrecv = ophatdecayrecv

number :: Signal Note -> ControlSignal
number = n

lsn :: Signal Double -> ControlSignal
lsn = lsnare
lsnbus :: Signal Int -> Signal Double -> ControlSignal
lsnbus = lsnarebus
lsnrecv :: Signal Int -> ControlSignal
lsnrecv = lsnarerecv

lpq :: Signal Double -> ControlSignal
lpq = resonance
lpqbus :: Signal Int -> Signal Double -> ControlSignal
lpqbus = resonancebus
lpqrecv :: Signal Int -> ControlSignal
lpqrecv = resonancerecv

lpf :: Signal Double -> ControlSignal
lpf = cutoff
lpfbus :: Signal Int -> Signal Double -> ControlSignal
lpfbus = cutoffbus
lpfrecv :: Signal Int -> ControlSignal
lpfrecv = cutoffrecv

loh :: Signal Double -> ControlSignal
loh = lophat
lohbus :: Signal Int -> Signal Double -> ControlSignal
lohbus = lophatbus
lohrecv :: Signal Int -> ControlSignal
lohrecv = lophatrecv

llt :: Signal Double -> ControlSignal
llt = llotom
lltbus :: Signal Int -> Signal Double -> ControlSignal
lltbus = llotombus
lltrecv :: Signal Int -> ControlSignal
lltrecv = llotomrecv

lht :: Signal Double -> ControlSignal
lht = lhitom
lhtbus :: Signal Int -> Signal Double -> ControlSignal
lhtbus = lhitombus
lhtrecv :: Signal Int -> ControlSignal
lhtrecv = lhitomrecv

lfop :: Signal Double -> ControlSignal
lfop = lfopitchint
lfopbus :: Signal Int -> Signal Double -> ControlSignal
lfopbus = lfopitchintbus
lfoprecv :: Signal Int -> ControlSignal
lfoprecv = lfopitchintrecv

lfoi :: Signal Double -> ControlSignal
lfoi = lfoint
lfoibus :: Signal Int -> Signal Double -> ControlSignal
lfoibus = lfointbus
lfoirecv :: Signal Int -> ControlSignal
lfoirecv = lfointrecv

lfoc :: Signal Double -> ControlSignal
lfoc = lfocutoffint
lfocbus :: Signal Int -> Signal Double -> ControlSignal
lfocbus = lfocutoffintbus
lfocrecv :: Signal Int -> ControlSignal
lfocrecv = lfocutoffintrecv

lcr :: Signal Double -> ControlSignal
lcr = lcrash
lcrbus :: Signal Int -> Signal Double -> ControlSignal
lcrbus = lcrashbus
lcrrecv :: Signal Int -> ControlSignal
lcrrecv = lcrashrecv

lcp :: Signal Double -> ControlSignal
lcp = lclap
lcpbus :: Signal Int -> Signal Double -> ControlSignal
lcpbus = lclapbus
lcprecv :: Signal Int -> ControlSignal
lcprecv = lclaprecv

lcl :: Signal Double -> ControlSignal
lcl = lclaves
lclbus :: Signal Int -> Signal Double -> ControlSignal
lclbus = lclavesbus
lclrecv :: Signal Int -> ControlSignal
lclrecv = lclavesrecv

lch :: Signal Double -> ControlSignal
lch = lclhat
lchbus :: Signal Int -> Signal Double -> ControlSignal
lchbus = lclhatbus
lchrecv :: Signal Int -> ControlSignal
lchrecv = lclhatrecv

lbd :: Signal Double -> ControlSignal
lbd = lkick
lbdbus :: Signal Int -> Signal Double -> ControlSignal
lbdbus = lkickbus
lbdrecv :: Signal Int -> ControlSignal
lbdrecv = lkickrecv

lag :: Signal Double -> ControlSignal
lag = lagogo
lagbus :: Signal Int -> Signal Double -> ControlSignal
lagbus = lagogobus
lagrecv :: Signal Int -> ControlSignal
lagrecv = lagogorecv

hpq :: Signal Double -> ControlSignal
hpq = hresonance
hpqbus :: Signal Int -> Signal Double -> ControlSignal
hpqbus = hresonancebus
hpqrecv :: Signal Int -> ControlSignal
hpqrecv = hresonancerecv

hpf :: Signal Double -> ControlSignal
hpf = hcutoff
hpfbus :: Signal Int -> Signal Double -> ControlSignal
hpfbus = hcutoffbus
hpfrecv :: Signal Int -> ControlSignal
hpfrecv = hcutoffrecv

hg :: Signal Double -> ControlSignal
hg = hatgrain
hgbus :: Signal Int -> Signal Double -> ControlSignal
hgbus = hatgrainbus
hgrecv :: Signal Int -> ControlSignal
hgrecv = hatgrainrecv

gat :: Signal Double -> ControlSignal
gat = gate
gatbus :: Signal Int -> Signal Double -> ControlSignal
gatbus = gatebus
gatrecv :: Signal Int -> ControlSignal
gatrecv = gaterecv

fadeOutTime :: Signal Double -> ControlSignal
fadeOutTime = fadeTime

dt :: Signal Double -> ControlSignal
dt = delaytime
dtbus :: Signal Int -> Signal Double -> ControlSignal
dtbus = delaytimebus
dtrecv :: Signal Int -> ControlSignal
dtrecv = delaytimerecv

dfb :: Signal Double -> ControlSignal
dfb = delayfeedback
dfbbus :: Signal Int -> Signal Double -> ControlSignal
dfbbus = delayfeedbackbus
dfbrecv :: Signal Int -> ControlSignal
dfbrecv = delayfeedbackrecv

det :: Signal Double -> ControlSignal
det = detune
detbus :: Signal Int -> Signal Double -> ControlSignal
detbus = detunebus
detrecv :: Signal Int -> ControlSignal
detrecv = detunerecv

delayt :: Signal Double -> ControlSignal
delayt = delaytime
delaytbus :: Signal Int -> Signal Double -> ControlSignal
delaytbus = delaytimebus
delaytrecv :: Signal Int -> ControlSignal
delaytrecv = delaytimerecv

delayfb :: Signal Double -> ControlSignal
delayfb = delayfeedback
delayfbbus :: Signal Int -> Signal Double -> ControlSignal
delayfbbus = delayfeedbackbus
delayfbrecv :: Signal Int -> ControlSignal
delayfbrecv = delayfeedbackrecv

ctfg :: Signal Double -> ControlSignal
ctfg = cutoffegint
ctfgbus :: Signal Int -> Signal Double -> ControlSignal
ctfgbus = cutoffegintbus
ctfgrecv :: Signal Int -> ControlSignal
ctfgrecv = cutoffegintrecv

ctf :: Signal Double -> ControlSignal
ctf = cutoff
ctfbus :: Signal Int -> Signal Double -> ControlSignal
ctfbus = cutoffbus
ctfrecv :: Signal Int -> ControlSignal
ctfrecv = cutoffrecv

chdecay :: Signal Double -> ControlSignal
chdecay = clhatdecay
chdecaybus :: Signal Int -> Signal Double -> ControlSignal
chdecaybus = clhatdecaybus
chdecayrecv :: Signal Int -> ControlSignal
chdecayrecv = clhatdecayrecv

bpq :: Signal Double -> ControlSignal
bpq = bandq
bpqbus :: Signal Int -> Signal Double -> ControlSignal
bpqbus = bandqbus
bpqrecv :: Signal Int -> ControlSignal
bpqrecv = bandqrecv

bpf :: Signal Double -> ControlSignal
bpf = bandf
bpfbus :: Signal Int -> Signal Double -> ControlSignal
bpfbus = bandfbus
bpfrecv :: Signal Int -> ControlSignal
bpfrecv = bandfrecv

att :: Signal Double -> ControlSignal
att = attack
attbus :: Signal Int -> Signal Double -> ControlSignal
attbus = attackbus
attrecv :: Signal Int -> ControlSignal
attrecv = attackrecv
